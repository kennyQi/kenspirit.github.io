<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2014-03-30T09:44:43+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2013 Retrospect and 2014 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2014/01/04/2013-retrospect-and-2014-goal-setting/"/>
    <updated>2014-01-04T08:00:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2014/01/04/2013-retrospect-and-2014-goal-setting</id>
    <content type="html"><![CDATA[<h2>工作</h2>

<p>工作上没有什么太大的变动，可以说趋于平淡。对于项目基本框架的使用已经没有什么问题，所以主要已经是在忙于实现项目业务功能模块上。但是还是痛苦挣扎于一些框架的限制，跨部门的约束，低效率的流程上，感觉效能无法有效提升。</p>

<p>组内的新人，经历了一两年的成长，基本上能够独立做事情。不像以前那样，还没想清楚就乱写代码，有问题又不问，最后又推倒重来。技术水平有些提升，代码也好看了些，所以我的介入相对少了很多。但是还有待提高，特别是那些低级错误，类似变量命名上打错字的问题经常让我发现，这让我非常恼火。因为这足以侧面知道做事认真仔细程度到哪。</p>

<p>去年我主要的侧重是集中精力帮他们提升思考能力和业务理解上，最重要的是怎么去思考业务需求带来系统设计的要求。在组内尽量推动的 Peer Code Review，对成员间的沟通，业务的理解，技术的提高上确实有很大的帮助，今年要再加强。希望今年组内每个成员都达到一定水平后，整体效率可以有效提升。</p>

<p>从团队管理上来说，我并不是做得太好。由于我还要参于很多开发工作，能留给我做些流程或其它方面的改进的时间并不多。计划和进度上也并不是控制的很好，我也始终在看，究竟何时及如何引入 Kanban。看是否能够引入责任人机制，透明化流程，让每个人责任感更强和对计划进度上控制更好。</p>

<h2>自我提升</h2>

<h3>读书</h3>

<p>有些书去年积累到现在都还没有看，主要是技术类的。因为水平有限，技术类的书，用零散时间看的话，真的不容易吸收，特别是没有实践配合的话。所以一直用 Kindle 在零散时间还是看非技术类的多。</p>

<p>不过近期 Kindle 被我基本抛弃在一边了。不是不读书了，而是我已经抱着 MBA 随处边看书，边写代码了。这真是太爽了，虽然对我的颈椎好像有点伤害，不过，这确实可以让我边看书，边实践，榨取更多的时间来 Coding。所以今后将会多看技术类书和实践。</p>

<p><strong>技术类</strong></p>

<ul>
<li>Functional Programming for the Object-Oriented Programmer by Brian Marick</li>
<li><em>NOSQL Distilled by Pramod J. Sadalage, Martin Fowler</em></li>
<li><em>Patterns of Enterprise Application Development by Martin Fowler</em></li>
<li>Domain-Driven Design by Eric Evans</li>
<li><em>The Art of UNIX Programming by Eric S. Raymond</em></li>
</ul>


<p><strong>非技术类</strong></p>

<ul>
<li><em>The Lean Startup by Eric Ries</em></li>
<li>The Pragmatic Programmer by Andrew Hunt, David Thomas</li>
<li><em>Mythical Man-Month by Frederick P. Brooks</em></li>
<li><em>YouTube 创始人陈士俊自传</em></li>
<li><em>打造 Facebook by 王淮</em></li>
<li><em>至关重要的关系 by 李开复</em></li>
<li><em>MackTalk: 人生元编程 by 池建强</em></li>
</ul>


<p><em>注：斜体的已阅</em></p>

<p>今年在看和计划要看完的主要为以下三本最基础的技术书，尽量年内搞定。</p>

<ul>
<li>Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay</li>
<li>Introduction to Algorithms by Thomas H Cormen</li>
<li>Algorithms 4th Edition by Robert Sedgewick and Kevin Wayne</li>
<li>Computer Systems &ndash; A Programmer&rsquo;s Perspective (2nd) by Bryant and O&#8217;Hallaron</li>
</ul>


<h3>打造关系网</h3>

<p>在看完《至关重要的关系》后，深有<a href="http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network/">感触</a>, 觉得之前并没有打造一个优质的职业和学习关系网，迫切渴望找到一些志同道合之人，可以一起学习进步。所以去年做了好几样事情：</p>

<ol>
<li>加入珠海 GDG，时不时去当一下志愿者和参加聚会</li>
<li>花血本从珠海飞北京参加了两次会议，一次是 AgileChina2013，一次是京JS。</li>
<li>约几个旧同事和好友，组织起来一起学习和交流</li>
</ol>


<p>几件事情下来，还是有点体会的。</p>

<p>首先，珠海 GDG 的参于还是挺让人兴奋的。参加者因为多为学生，演讲主题都主要是入门级的。真要按照营养上来说的话，对我受益不大。但是有机会认识大妈，刘鑫老师和其他一些组员还是挺高兴的，还让自己增添不少活力。不过以后要参加，就要尽量看能否上去做分享，而不是去听。</p>

<p>至于参加一些行业会议，我的目的本来就很坦然，就是看什么会议是值得去的，什么不值得。所以，目标完全实现。AgileChina2013 那次主要是要去听 David 亲自授课，所以感觉很好。后面的大会，因为讲的是方法论什么的多，这些不亲自实践是没办法了解的，而我近期主要攻技术，所以，敏捷这类大会就不会再去了。京JS 给我的感觉也还可以，虽然会议上难免各种对自己作品的广告，但是还是能和一些大神交流，了解他们的看法，新动向等，还是不错的，明年的 JS 大会应该还会去。经过这些行业会议，体会就是，你如果想和牛人有更多话题，让他们关注和看得起你，自己得先变成牛人。今看还是会留预算去参加一到两个这些会议，看几时能让别人看得起。</p>

<p>最后一个自我组织朋友来一起交流学习的事情，好坏参半。目前情况基本可以说告一段落。虽然大家有聚在一些玩了一些东西，但是感觉每个人的兴趣偏好和对聚会的期望都不尽相同，最后这个聚会基本可以说是失败的。但是中间也学习到不少，和知道自己想要什么。有些事情强求不来，步子迈大了就扯着蛋了。</p>

<h3>开源和项目</h3>

<p>本来是计划做一个 Pet Project，但是做一半后，像上面说的，想约三五朋友一起去做一个更大的东西，一个像 Salesforce 那样的一个 Multi-tenant 的企业系统。可惜没人搭理我，后面自己在考虑怎么在 MongoDB 动态分配空间，和实现了一下后，感觉这东西太大了，先放了下来，后面再找机会继续。</p>

<p>在学习和实践期间，做了两个小玩意出来，一个是用于在 Node.js 和浏览器共享代码的 <a href="https://github.com/kenspirit/webassemble">webassemble</a>, 还有一个是在 ExtJS 里面用 Promise 的 <a href="https://github.com/kenspirit/ExtPromise">ExtPromise</a>。前一个今年如果自己不做什么项目的话，估计使用就会比较少了。希望后一个能什么时候在公司项目里用上。</p>

<p>自己还算是开源的踊跃支持者的，并有幸被 AngularJS 接纳了一个 enhancemnt patch，非常高兴。今年看书以外如果有时间看源码，还会挑一些开源的 JS 项目来参于一下，目前考虑 AngularJS 和 React。</p>

<h2>时间安排</h2>

<p>学习时间：<br/>
基本上是按照去年的时间安排走。上下班车里的30分钟，还有其它一切可能的坐车时间，现在都在用 MBA 看书和写代码。早上5:30左右起来，一直到7点，大概1小时多点而已，周末时间长点。周末午休时间也大概有2小时。基本上就这么多了。</p>

<p>家庭时间：<br/>
和去年差不多，占个人时间大头。但是还是一个不懂怎么培养孩子的父亲，因为时间花在考虑怎么培养自己上面了。只希望给他带个好头，别学坏了就好。每每看到 Michelle 带她女儿体验什么，学习什么，各种惭愧。</p>

<p>锻炼时间：<br/>
中间有段时间断了一下，因为身体受伤，杂七杂八事情，没能很好坚持每天早上固定15分钟左右的锻炼时间。最近恢复，跳绳为主。今年还是得加强一下，身体是本钱。好玩的事情是人生第一次参加公司篮球比赛，虽然偶尔有上场，但主要是抱同组里年轻小伙的大腿，拿到人生的第一个第一名。</p>

<h2>善事</h2>

<p>这方面去年贡献不多，主要是个人精力不足，所以违背了去年美好的想法，每月固定给壹基金和联合国儿间基金会捐助一点。事后证明我行的确实是伪善。</p>

<h2>总结</h2>

<p>工作还凑合，仍需努力和把自己的爱好用在公司项目上。自己喜爱的东西，很难在公司派上用场，感觉真不太爽，看今后怎么操作吧。虽然已经在不断努力学习，也做了一些东西，但是离10000小时原则的强度和积累还是差太远了，今年必须更加努力。正如前面安排，把自己基础巩固好，希望后面能有效提升效能，不断参于开源，写 Blog 和分享总结。还有一件事就是希望可以做个有趣的人，从生活中找找灵感，看能做些什么好玩意没有，反正是随心写代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Ext Ajax in Promise style and test it]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/11/25/how-to-use-ext-ajax-in-promise-style-and-test-it/"/>
    <updated>2013-11-25T08:50:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/11/25/how-to-use-ext-ajax-in-promise-style-and-test-it</id>
    <content type="html"><![CDATA[<p>After translated a <a href="http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/">blog</a> about how Promise works in a more functional programming way, I tried to build something to make Ext Ajax call to work in Promise style as a practice.</p>

<p><a href="https://github.com/kenspirit/ExtPromise">ExtPromise</a> is a simple wrapper to Ext.Ajax and Ext.data.Connection to help you do an Ajax call in Promise style instead of passing success/failure callback to it.  The Promise library I used is the <a href="https://github.com/petkaantonov/bluebird">bluebird</a>.  I chose it not only because its speed is faster than most of the Promise library, but also its error handling philosophy looks cleaner and more attractive.</p>

<p>It didn&rsquo;t took long to implement the ExtPromise wrapper but it took me some time to test it.</p>

<p>Originally, I thought I could use the <a href="http://www.thinkingincrowd.me/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2/">jasmine-ajax</a> I enhanced and shared before about how to test Ajax call in ExtJs.  However, it doesn&rsquo;t work as expected.  Testing Async method in <a href="http://pivotal.github.com/jasmine/">Jasmine</a> seems very awkward because the API in version 1.4 and 2.0 are dramaticlly different.  Even worst, many strange issues messed around all the way.</p>

<p>I finally gave up and search other alternative approaches.  <a href="http://github.com/cjohansen/Sinon.JS">Sinon.js</a> and <a href="http://github.com/visionmedia/mocha/">Mocha</a> come to rescure.  It is pretty easy to test the Ajax call using the <code>useFakeXMLHttpRequest</code> provided by Sinon and the Async testing in Mocha looks more intuitive (Jasmine 2.0 use the same way).  Let&rsquo;s see how the testing (BDD style) is setup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Ajax should be now working in promise style&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">xhr</span><span class="p">,</span> <span class="nx">ajax</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">useFakeXMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">xhr</span><span class="p">.</span><span class="nx">onCreate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ajax</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">xhr</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;ExtPromise.Ajax&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;#success case&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ExtPromise</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">().</span><span class="nx">request</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">responseText</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Bar&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">ajax</span><span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span> <span class="p">},</span> <span class="s1">&#39;Bar&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s quite straightforward.  Before test spec runs, it&rsquo;s required to stub the XMLHttpRequest using Sinon&rsquo;s <code>useFakeXMLHttpRequest</code> API and obtain a reference in the <code>onCreate</code> method so that later it can be used to stub a response.</p>

<p>Passing a <code>done</code> parameter in the test spec function tells Mocha that this spec is for Async testing and callinig <code>done()</code> will end it.  One thing to notice here is this part.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t do this, and the assertion in the test spec failed, the error it shows will be a timeout error instead of telling the true assertion error.</p>

<p>When testing failure case, the style written like below doesn&rsquo;t look good and error-prone because <code>done()</code> is called twice although you might think the success resolver doesnot require as it should not be called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ExtPromise</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">().</span><span class="nx">request</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">scope</span><span class="o">:</span> <span class="nx">scopeObj</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">scopeObj</span><span class="p">.</span><span class="nx">getName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Bar In scope&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">status</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ajax</span><span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span> <span class="p">},</span> <span class="s1">&#39;Error&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may rewrite the call to <code>done</code> in a then call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ExtPromise</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">().</span><span class="nx">request</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">scope</span><span class="o">:</span> <span class="nx">scopeObj</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">scopeObj</span><span class="p">.</span><span class="nx">getName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Bar In scope&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">status</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ajax</span><span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span> <span class="p">},</span> <span class="s1">&#39;Error&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[京JS 2013 之挖坑自埋与神打击]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/11/14/jingjs-2013-fun/"/>
    <updated>2013-11-14T20:21:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/11/14/jingjs-2013-fun</id>
    <content type="html"><![CDATA[<p><img alt="JingJS Badge" src="http://thinkingincrowd.u.qiniudn.com/JingJS_Badge.jpg?imageView/2/w/100" style="position: relative; float: left; margin-right: 5px; border: 0px;"/>首先要吐槽一下 <a href="http://weibo.com/jingjs2013">@京JS</a>。指示牌不清楚，从酒店另一个门进去根本看不到，最悲剧的是酒店的服务员都不知道这个会议。还有就是硬件上相当不给力，没有 WIFI，这不是新10大酷刑之一吗？没午饭，还要我等外地屌丝奔波找吃的。加之第一天的讲座广告水份有点多，个人感觉有趣的和比较好的是 <a href="https://github.com/substack">@substack</a>，<a href="http://isaacmao.com/">Issac</a> 和讲 Data Visualization 的 Nick。第二天早上的主题还是相当给力的，下午 Kim, Jakob 也还不错。</p>

<p>晚上的活动还是要狠狠表扬一下 @京JS。第一晚包了车库咖啡，晚饭虽然是 Pizza 等，但是量也算足，只是地方有点小，不过也是逼着和别人站着交流的好机会。星期天的晚上还有去 Bar 的 after-party，可惜我要赶飞机回珠海，就没法去了，但估计也会很棒。</p>

<p>第一天晚上，看到 @substack 来了后，我坚定不移地过去和他搭话，接着各种好玩，技术黑和大神间（当然这不包我）的对话就来了。首先声明，可以肯定我的智商是完全没法跟上大神的，加上没法肯定听力上能跟上多少。所以下面的一些神吐糟不保证 100％ 正确，有错误的话也是我这译者的错误，并且这里的技术黑都不是拉仇恨啊。 Please forgive my poor English for any potential misleading.</p>

<p>我和他搭话是因为我最近看的一篇<a href="http://www.thinkingincrowd.me/blog/2013/11/13/callbacks-are-imperative/">关于 Promise 的文章</a>，个人感觉不错的，想问他对比 Callback 有什么看法。原来他并不太喜欢 Promise。（好了，整晚挖坑自埋的节奏开始了）。他指点我去看看 <a href="http://callbackhell.com">callbackhell.com</a>，还有他的 <a href="https://github.com/substack/stream-handbook">stream-handbook</a>。说如果我按照那样做了，也应该不会碰到什么 Hell 的问题。他说即使他以后遇到，也是首先偏向于用 <a href="https://github.com/caolan/async">Async</a> 的。</p>

<p><img alt="Substack Signature" src="http://thinkingincrowd.u.qiniudn.com/Substack_Signature.jpg?imageView/2/w/500" style="border: 0px;"/></p>

<p>接着一个同学拿着 Douglas Crockford 的书给他签名，他说虽然和他有点过节还是观点不同什么来着（他用的词忘了），但还是签了（他的签名很有趣，就是上面这幅机器人漫画，幸亏我也拿到一个）。我就八卦了一下问是他说的是什么情况，他举例说那个什么 <a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html">Hoisting</a> 就是胡扯。我当然也很赞同的说是的，应该定义在离它最近使用的地方。好像记得 <a href="http://weibo.com/lifesinger">@玉伯也叫射雕</a> 也是持同样观点的。</p>

<p>然后 <a href="http://weibo.com/fool2fish">@fool2fish</a> 出现了，问他关于一些测试方面怎么区分浏览器 Tab 独立线程，监测 CPU，等什么的（好像是说这些吧，中间没太跟上）。然后他不断解说和演示他的 <a href="https://github.com/substack/testling">testling</a> 可以拿来怎么用。</p>

<p>之后 @fool2fish 就问可以在 testling 里用什么测试框架，@substack 又把自己的 <a href="https://github.com/substack/tape">tape</a> 搬出来耍了。@fool2fish 再问能否集成 <a href="https://github.com/visionmedia/mocha">Mocha</a> 之类的框架时，@substack 说可以的。但是他不喜欢用那些框架，一堆的全局变量，evil，不是 Node 可以直接运行的程序。还有 <a href="https://github.com/pivotal/jasmine">Jasmine</a> 什么的更烂。估计喜欢这两个的，听到这都晕了。</p>

<p>然后转到问是否支持 <a href="http://en.wikipedia.org/wiki/Asynchronous_module_definition">AMD</a>，<a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a> 的主题上。@fool2fish 就给他瞄了一眼 <a href="https://github.com/seajs/seajs">SeaJS</a> define 的用法，可能本想把它推出国门。没想到他说他知道 SeaJS，但这不是 CommonJS，是 fake 的写法。@fool2fish 脸都绿了，都想拉 @玉伯也叫射雕 来抵抗一下了，没等反应过来。@substack 又搬出了他的 <a href="https://github.com/substack/node-browserify">browserify</a> 来说明怎么把 Node 的代码和浏览器分享（这个观点我一直是比较赞同的，所以之前也基于 <a href="https://github.com/medikoo/modules-webmake">webmake</a> 搞了个 <a href="https://github.com/kenspirit/webassemble">webassemble</a>。因为我觉的生产环境基本都是打包好再用的，哪有什么异步再去拿文件，异步也是拿另一个大 bundle。require 在 Node 的写法，如果在浏览器能通用确实挺好的。回头细想是不是偏后端程序员没看到前端看到的另一些东西，我再想想）。旁边的另一个鬼佬（抱歉不认识是哪位神），看到我们被打击的样子，几乎笑的不行了，都和 @substack 说你别再打击他们了，可是神才不鸟你，继续打击。</p>

<p>后面，他们都走了，我犯贱又去问 @substack 怎么看那些前端的 MVC 或者 MVVM 的框架，比如 <a href="http://angularjs.org">AngularJS</a>。他说他还没看懂到底它最终要解决什么问题，一堆的东西，什么 DI，Databinding 等。我说 Databinding 很好啊，可以免得我们写一堆代码拿值赋值等，declarative 语法也不错啊。他说他只是写纯粹的 JS，那些拿值赋值的可以什么把原生操作抽象和模块化，举例说把复杂的 Form 抽象成模块，只在里头处理赋值拿值之类的。我说那不是 JS 和 HTML 混一起了吗？他好像说只要模块化的好就没有问题了。晕。（这里不敢苟同，可能我还没到那种境界）</p>

<p>最后，又再一次嘴贱的问他那个 tape 能不能集成到 <a href="http://gruntjs.com/%E2%80%8E">Grunt</a>。没想到他说他也没看明白 Grunt 有什么用，我就知道我又挖坑埋自己了。他啪啪啪敲键盘和让我看他怎么用 NPM 的 test 命令，自定义命令和直接结合 Script 来做到一系列的集成操作的。</p>

<p>@substack 真是 geek 到不行啊。他追求纯粹，简洁，和模块化可以说到极致的境地，不喜欢那些大而全的框架，真的是和我最近看的 “Art of Unit Programming” 那本书说到 “Only do one thing and do it really well”，然后通过组合把一些小工具结合成更强大的工具的思想非常吻合。</p>

<p>后面 H神 来了之后，被打击对象转到他头上了。是的，神喷神了，哈哈。以下可能和原话有偏差，因为大神间的对话，我有时实在很难跟上。</p>

<p>H神 在做的是 <a href="http://vertx.io/">Vert.x</a>。他一开始说它们直接支持在 npm 跑还是改了加了什么新功能来着。（一开始我在纠结那个 Vertx 发音是什么东西，迷失了一下）。@substack 就说你们那么改的原因是什么？带来什么好处？没好处改来干什么？（另一个神被打击的样子很有趣 :D ）。后来说 Vert.x 特性是 Polyglot，说到支持 Java，Python 等，@substack 意思好像是说为什么要那么做？那些垃圾语言支持来干嘛？（Python 差点被拖累了，他后来改口说 Python 不烂）我永远都不要写 JAVA。H神 也脸绿了，我也帮口说在商业大项目里，因为系统和团队的多和杂，Polyglot 和 JAVA 都是需要的，虽然我现在也不喜欢 JAVA。其实无论我们怎么说，神的观点都不会变，他就说我不会遇到这样的情况，哈哈。H神 后来问 @substack Vert.x 怎么才能被他们 buyin (接受)，@substack 就不断 blablabla 说什么你们的 api 要保持和 npm 一致，要在 npm 上容易安装，可以通过 -g 参数那样装了后，命令运行等，不然你看现在没人鸟你们，然后各种建议给他。</p>

<p>两大神后来开始缅怀小时候几岁的时候玩什么技术之类的，我的智商和听力就彻底跟不上了。后来 H神 说他用 SQL 去考他妈妈，他妈妈竟然只需要问它那个语句是干什么的，然后她妈妈竟然可以从汇编，指令和寄存器的角度指出它哪里有问题了。靠，开挂了吧。H神 还想请 @substack 去他们上海公司给员工感受一下什么叫做 live for code，而不是 code for live 的精神。说费用他包，问有没有兴趣。@substack 好像说会在中国待 3 星期，没什么问题，之后可能还要到深圳来骑车什么的。深圳的同学们有关系的话，就看能不能请到他去玩了。后面我们扯着扯着就讲到为什么国内那么难找到这样的人，什么独生政策，教育，压力的都来了。中间我还讥讽 H神 也还不是 code for live。他说不是，他是因为写 code 是让他可以赚最多钱的工作。其实他还可以搞建筑什么的，还说他的床上功夫也不错，笑死我。 我们就这样一直聊到 10 点散场了才走了。</p>

<p>整个晚上和 @substack 及其他大神的一些直接对话真比在会场听一天感悟还多。所以意见是大家以后听会议，一定要准备问题，尽量和各种大神聊天。只是听讲座和拍几张PPT或大神照片就没什么用了。</p>

<p><img alt="Group" src="http://thinkingincrowd.u.qiniudn.com/JingJS_AfterParty.JPG?imageView/2/w/500" style="border: 0px;"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回调函数是指令式的，Promise 是函数式的：Node 错失的最大机会]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/11/13/callbacks-are-imperative/"/>
    <updated>2013-11-13T21:43:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/11/13/callbacks-are-imperative</id>
    <content type="html"><![CDATA[<p>我之前都有接触过关于 <a href="http://en.wikipedia.org/wiki/Promise_(programming)">Promise</a> 的一些文章，但是对它的感觉并不大。因为觉得虽然<a href="http://en.wikipedia.org/wiki/Callback_(computer_programming)">回调</a>风格确实有问题，但我写的代码还没有复杂到那种程度，所以，要去使用的感觉并不强烈。</p>

<p>但是，后面碰到一个问题真的好像用回调的风格来写的话，会比较糟糕。加上看到了这一篇从另一侧面来看 Promise 对函数式编程的思维方面的转变，觉得很不错。值得一看，所以在有其它大神也翻译过的情况下，自己也译一次，顺便深入学习。</p>

<p>原文链接： <a href="http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/">Callbacks are imperative, promises are functional: Node’s biggest missed opportunity</a></p>

<blockquote><p>Promise的本质就是他们不随着环境的变化而变化。</p>

<p>  —— Frank Underwood，‘纸牌屋’</p></blockquote>

<p>你经常会听到说 JavaScript 是一门 &ldquo;函数式&rdquo; 编程语言。通常我们这样描述它的时候是因为函数在它里面是作为 &ldquo;一等公民&rdquo; 而存在的。但是其它 &ldquo;函数式&rdquo; 编程语言里面的特性，比如：数据不可改变，代数类型系统，使用迭代优于循环，避免副作用都统统忽略了。虽然函数作为 &ldquo;一等公民&rdquo; 是非常有用的，并且决定用户能够在需要的时候使用函数式风格来编写代码。但是 JS 是函数式的观点却常常忽略了函数式编程的核心思想：面向值编程。</p>

<p>&ldquo;函数式编程&rdquo; 的命名其实会产生误导，以至于人们认为它的意义在于，相对于 “面向对象编程” 来说，它是 “面向函数编程”。但是如果面向对象编程是把所有东西都从对象角度考虑，那函数式编程就是把所有东西都作为值来处理，而不仅仅是把函数考虑为值。很明显，数值当然包含那些数字，字符，列表和其它数据值，但其实它也包含其它面向对象编程的粉丝通常没有考虑过的一些东西：IO 操作和其它副作用，GUI 事件流，空值检查，甚至函数调用的顺序。如果你曾经听说过 “<a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">可编程分号</a>” 的话，你应该知道我想说的是什么了.</p>

<p>函数式编程最大的好处是它是声明式的。在命令式编程里面，我们需要写一系列的指令来告诉计算机是怎么去实现我们想要做的事情的。在函数式编程里面，我们只是需要描述值之间的计算关系，计算机就会自己想办法得出需要的计算指令顺序。</p>

<p>如果你使用过 Excel 的话，你其实已经用过函数式编程了：你只需要描述一个图表里面的值，是怎么相互计算出来的。当有新数据插入的时候，Excel 就会自己得出图表里有什么地方的值和效果要更新，而你并不需要再为它写出任何指令，它也可以帮你计算出来。</p>

<p>在阐述了这些基本概念的基础上，我想说明一下我觉得 Node.js 在设计上最大的失误是什么: 这就是在它的设计早期，决定了倾向于使用回调风格的 API 而不是 promise 风格.</p>

<blockquote><p>所有人都使用回调。如果你发布了一个返回 promise 的模块，根本没有人会关注和使用你那个模块。</p>

<p>如果我写了一个小模块，它需要和 Redis 交互，我所需要做的唯一一件事情就是传递一个回调函数给 Redis。当我们遇到<a href="http://callbackhell.com/">回调无底洞</a>的时候，其实这根本不是什么问题: 因为同样有<a href="http://en.wikipedia.org/wiki/Coroutine">协程</a>和 <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">monad</a> 无底洞。因为如果你把任何一个抽象使用地足够频繁的话，都同样会创造一个无底洞。</p>

<p>在 90% 的情况下，你只需要做一件事情，回调如此简单的接口使得你只是需要简单的缩进一下就可以了。如果你遇到了非常复杂的用例，你和其它在 npm 里面的 827 个模块一样，使用 async 就好了.</p>

<p>—— Mikeal Rogers，LXJS 2012</p></blockquote>

<p>这段话是从 Mikeal Rogers 最近的一次涵盖了好些 Node 设计哲学的演讲里摘取出来的:</p>

<blockquote><p>在 Node 的初期设计目标里面，我希望可以让更多的非专家级别的程序员可以很容易编写出快速，支持并行的网络程序，虽然我知道这个想法有点违背生产效率。Promises 其实可以使得程序在运行时自动控制数据流动，而不是靠程序员通过显式指令控制，所以能更加容易组织正确清晰和最大化并行操作的程序.</p></blockquote>

<p>要写出正确的并行程序基本上需要你实现尽可能多的并行工作的同时，保证操作指令还是以正确的顺序执行。虽然 JavaScript 是单线程的，但我们依然有可能因为在异步操作的情况下触发了竞争机制: 任何涉及 IO 的操作都会在它等待回调的时候把 CPU 时间腾到其它操作上面。多个并发操作就有可能同时访问同一段内存数据，或者产生一系列重叠的操作数据库或者 DOM 的指令。所以，我希望在这篇文章里可以告诉大家，promies 能够像 Excel 一样，提供一种只需要描述值之间的关系模型，你的工具就能够自动寻求最佳解决方案给你。而不是需要你自己控制程序流.</p>

<p>我希望可以清除掉一个误区就是 promises 的使用就是为了让语法结构看起来比基于回调的异步操作更清晰。其实它们可以帮助你用一个完全不同的方式来建模。它们的作用比简化语法来得更深层次。事实上，它们完全从语意角度改变你解决问题的方式。</p>

<p>首先，我想先重温一下几年前写的一篇文章。它是关于 promises 是怎么在异步编程上作为一个 monad 的角色而存在的。这里的核心思想就是 monad 其实是帮助你组织函数的工具，比如说，当一个函数的返回值要做为下一个函数的输入的时候，建立数据管道。数据关系的结构化是实现的关键。</p>

<p>在这里的，我还是需要用到 Haskell 的类型注解来帮助说明一下。在 Haskell 里，注解 foo :: bar 表示 “foo 是 bar 的类型“。注解 foo :: Bar &ndash;> Qux 表示 “foo 是一个接受输入值为 Bar 类型和返回值为 Qux 类型的函数“。如果输入输出的类别并不重要的话，我们会用单一小写字母，foo :: a &ndash;> b。如果函数 foo 可以接受多个参数的化，我们会添加多个箭头，比如：“ foo :: a &ndash;> b &ndash;> c ” 表示 foo 接收两个分别为类型 a 和 b 的参数并返回类型 c 的值.</p>

<p>我们来看一个 Node 函数吧，比如，fs.readFile()。这个函数接收一个 String 类型的路径参数，还有一个回调函数，并且没有任何返回值。回调函数会接收一个可能为空的 Error 类型和一个包含了文件内容的 Buffer 类型的参数，并且也没有返回值。那我们就可以把 readFile 的类型用注解表示为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">readFile</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Callback</span> <span class="ow">-&gt;</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>() 在 Haskell 注解中表示空值类型。这里的 callback 是另一个函数，它的注解可以表示为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Callback</span> <span class="ow">::</span> <span class="kt">Error</span> <span class="ow">-&gt;</span> <span class="kt">Buffer</span> <span class="ow">-&gt;</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>把它们放在一起的话，我们可以说 readFile 接收两个参数，一个 String 类型，一个是接收 Buffer 参数的函数:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">readFile</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Error</span> <span class="ow">-&gt;</span> <span class="kt">Buffer</span> <span class="ow">-&gt;</span> <span class="nb">()</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我们来想象一下假如 Node 使用 promises 会是怎么样的。这样的情况下，readFile 可以简单的接收一个 String 类型参数然后返回一个 Buffer 的 promise:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">readFile</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Promise</span> <span class="kt">Buffer</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般来说，我们可以认为回调风格的函数接收一些参数和一个函数，这个函数将会被最终调用并传递返回值作为它的输入；promises 风格的函数就是接收一些参数，和返回一个带结果的 promise:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">callback</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Error</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="nb">()</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">promise</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Promise</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>那些回调风格返回的空值其实就是为什么使用回调风格来编程会很困难的根本原因: 回调风格不返回任何值，所以难以组合。一个没有返回值的函数执行的效果其实是利用它的副作用 – 一个没有返回值和利用副作用的函数其实就是一个黑洞。所以，使用回调风格来编程无法避免会是指令式的，它实际上是通过把一系列严重依赖于副作用的操作安排好执行顺序，而不是通过函数的调用来把输入输出值对应好。它是通过人手组织程序执行流程而不是靠理顺值的关系来解决问题的。这正是编写正确的并行程序困难的原因.</p>

<p>相反，基于 promise 的函数总是让你把函数返回值作为一个不依赖于时间的值来考虑的。当你调用一个回调风格的函数时，在你的函数调用和它的回调函数被调用之间，在程序里面我们没办法找到一个最终结果的表现形式.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// some time passes...</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// the result now pops into existence</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从基于回调和事件的函数里面取得结果基本上意味着 “你必须在恰当的时间和地点”。如果你在事件被触发之后才绑定你的事件监听器，或者你没有在恰当的地方回调你的函数，那么恭喜你，你将无法得到你要的结果了。这些事情使得人们在 Node 里写 HTTP 服务器相当困难。如果你的控制流不对，你的程序就无法按期望运行.</p>

<p>相反，Promises 并不关心执行的顺序。你可以在 promise 兑现前或后注册监听器，但你总能拿到它的返回值。因此，那些马上返回的 promises 其实是给了你一个代表结果的值，让你可以把它当作一等公民，然后传递给其它函数。中间不需要等待一个回调或任何丢失事件的可能性。只要你手中拿着一个 promise 的引用，你就能从它得到你想要的值.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="nx">p2</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">2013</span><span class="p">);</span>
</span><span class='line'><span class="nx">p2</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prints:</span>
</span><span class='line'><span class="c1">// 42</span>
</span><span class='line'><span class="c1">// 2013</span>
</span></code></pre></td></tr></table></div></figure>


<p>即便 then() 这个方法似乎隐含一些关于操作顺序 – 事实上这只是它的副作用 – 你可以把它想象成叫做 unwrap。Promise 是一个未知值的容器，那么 then 的工作就是从 promise 中把值取出来并交给另一个函数: 它其实是 monad 的 bind 函数。其实上面的代码里没有任何地方提及什么时候这个值是存在的，或事情是按照什么顺序发生的，它只是表达了一些依赖关系在里面: 你必须首先知道那个值是什么，然后才能够把它打印出来。程序的顺序是从值的依赖关系中衍生出来的。这里其实只有很小的区别，我们在后面讨论到延迟 promise 的时候会看得更清楚.</p>

<p>到目前为止，这些区别都很微小；很少函数单单和其它函数交互。我们现在来处理一些复杂一点的问题，以便看到 promises 更加强大之处。假设我们现在有一些代码，通过使用 fs.stat() 来取得一些文件的 mtimes。如果是同步的操作，我们只是需要调用 paths.map(fs.stat) 就可以了，但是因为用 mapping 来处理异步的问题是很困难的，我们看看用上 async 模块是什么样子.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">async</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">fs</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">paths</span><span class="err">，</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// use the results</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>(是的，我知道 fs 的函数有同步版本，但大多数涉及 I/O 的操作都没法这么做，就陪我玩一玩吧。)</p>

<p>这样看起来都还不错，直到我们决定要拿到 file1 的大小来做其它不相关的任务的时候。当然，我们可以再拿一次那个文件的状态:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">paths</span><span class="err">，</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// use the results</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">paths</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">stat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// use stat.size</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样显然没有问题，但是我们现在取了那个文件的状态两次。当然，本地的文件操作是没有问题的，但如果我们正在通过 https 来获取大文件的时候，那麻烦就大了。所以，我们只能访问文件一次。这样，我们就要修改一下前面的代码来特殊处理一下第一个文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">paths</span><span class="err">，</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">size</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// use size</span>
</span><span class='line'>  <span class="c1">// use the results</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这初看也没有问题，但是获取文件大小的任务就必须等到整个列表都处理完了才能够开始。如果其中任何一个文件处理出错，我们就无法得到第一个文件的结果了。这种方案并不好，那我们来试一试另一种方式: 我们把第一个文件分开单独处理.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">file1</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">file1</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">stat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// use stat.size</span>
</span><span class='line'>  <span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">paths</span><span class="err">，</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">results</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">stat</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// use the results</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当然可行，但是现在我们的程序并不是并行的了: 它将需要更长的时间去运行，因为我们必须等到第一个文件处理完才能开始处理那个列表里的文件。之前，它们都是同步进行的。还有，我们现在还必须对第一个文件特殊处理而引入一些数组的操作.</p>

<p>好吧，最后一击。我们现在要做的是得到所有文件的详情，每个文件只读取一次，如果第一个文件读取成功了我们要做些特殊处理，并且如果整个列表里的文件都处理成功，我们要对整个列表再进行一些操作。让我们用 async 来在代码里表达出这个需求的依赖关系看看.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">file1</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">file1</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">stat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// use stat.size</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">stat</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">paths</span><span class="err">，</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="err">，</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">stats</span> <span class="o">=</span> <span class="p">[</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="c1">// use the stats</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，这样就达到要求了: 每个文件只读取一次，所有的工作都是并行处理的，我们也可以独立的访问第一个文件的结果，并且相互依赖的任务都是尽早执行完毕的。搞定!</p>

<p>其实，并不能说完全搞定了。我认为这样的代码真的很丑陋，并且当问题变的复杂的时候，这样的代码很难扩展。为了让它正常工作，我们需要考虑大量的代码执行顺序问题。 而且设计意图并不明显以至于后面的维护很可能会不经意把它破坏掉。当我们引入了一个特殊需求后，原本问题的解决策略被迫同一些后续的跟进操作混杂在一起，并且我们还要对数组作出那么恶心的操作。</p>

<p>所有的问题其实都来自于我们尝试通过控制程序流来作为主要的解决问题的手段，而不是依赖于数据之间的关系。不是说 “为了能够运行这个任务，我需要这个数据”，并让运行环境去寻找优化手段，而是显式声明运行时什么应该并行，什么应该串行，所以导致我们的解决方案是如此脆弱.</p>

<p>那么，promises 如何改善这种情况呢? 我们需要一些操作文件系统的函数是可以返回 promises 而不是接收一个回调函数的。但是与其手写一个这样的函数，我们可以用元编程的方式写一个函数，使得它可以转换任何其它函数返回 promises。比如说，它可以接收如下一个函数定义为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Error</span> <span class="ow">-&gt;</span> <span class="kt">Stat</span> <span class="ow">-&gt;</span> <span class="nb">()</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且返回以下类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Promise</span> <span class="kt">Stat</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面就是这个元编程的函数:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// promisify :: (a -&gt; (Error -&gt; b -&gt; ()) -&gt; ()) -&gt; (a -&gt; Promise b)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">promisify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="err">，</span><span class="nx">receiver</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">slice</span>   <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">args</span>    <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="err">，</span><span class="mi">0</span><span class="err">，</span><span class="nx">fn</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span>
</span><span class='line'>          <span class="nx">error</span>   <span class="o">=</span> <span class="nx">results</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">promise</span><span class="err">，</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">receiver</span><span class="err">，</span><span class="nx">args</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>(这还不是一个通用方案，但是足够在我们的场景里使用了.)</p>

<p>我们现在可以重新对我们的业务问题建模。我们基本上要做的就把一个列表的文件路径，转换为一个列表的文件状态 promises:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs_stat</span> <span class="o">=</span> <span class="nx">promisify</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [String] -&gt; [Promise Stat]</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">statsPromises</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">fs_stat</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这里就可以看出分别了: 通过使用 async.map() ， 你必须等到整个列表处理完了，你才能拿到数据进行处理。但是如果你有了一个列表的 promises，你可以直接拿第一个 promise 来操作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">statsPromises</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">stat</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* use stat.size */</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，通过使用 promise，我们把大部分问题都解决了: 我们并行得到所有文件的状态，并且可以独立访问并不止第一个文件，可以是任何一个文件，而这只需要指定某个数组位就可以了。通过前一种方法，我们需要显式写逻辑特殊处理第一个文件，而且考虑怎么拿到那个文件还非常费事。但是，通过一个列表的 promises 就很容易了.</p>

<p>当然，这里缺少的部分是当所有的文件状态信息都拿到后，我们应该怎么处理。通过前面，我们得到了一个列表的 文件状态值对象，但这是一个列表的 promises。我们需要等到所有的 promises 都处理完后，拿到一个列表的文件状态。也就是说，我们要把一个列表的 promises 转化成一个 promise 对应于整个列表.</p>

<p>让我们看看一个简单的 list 方法是怎么做到可以把一个包含了 promises 的列表转化成一个 promise，而且当它里面所有的 promises 都处理完后，它自己也处理了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// list :: [Promise a] -&gt; Promise [a]</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promises</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">listPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">listPromise</span><span class="p">)</span> <span class="nx">promises</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">listPromise</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[]</span><span class="err">，</span><span class="nx">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">promises</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="err">，</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">done</span> <span class="o">===</span> <span class="nx">promises</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="nx">promises</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">promises</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">promises</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">promises</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">promises</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>(译者注：这里感觉好像 promises 和 listPromise 几个地方反了。作者没开评论，无法确认，不过有时间试一下代码就知道了。)</em></p>

<p>(这个方法其实和 jQuery.when() 函数类似，它同样接收一个列表的 promises 并返回一个新的 promise。当这个 promise 所有的输入都处理完后，它自己也处理了.)</p>

<p>我们现在就可以通过把数组包装成一个 promise，然后等所有的处理结果出来就可以了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">list</span><span class="p">(</span><span class="nx">statsPromises</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">stats</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* use the stats */</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么我们完整的解决方案就会是这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs_stat</span> <span class="o">=</span> <span class="nx">promisify</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;file1.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file2.txt&#39;</span><span class="err">，</span><span class="s1">&#39;file3.txt&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">statsPromises</span> <span class="o">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">fs_stat</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">statsPromises</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">stat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// use stat.size</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">statsPromises</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// use the stats</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个解决方案的表达就相当的简洁清晰了。通过一些通用的辅助函数和既有的数组操作函数，我们用一种正确的，有效并且容易调整的方法来实现了。我们也不需要 async 模块的特殊集合类函数，我们只需要让 promises和数组两者的思想相互独立，并通过一种强大的方式把它们组合使用就可以了.</p>

<p>特别要注意的是，我们的程序在这里并没有说任何部分是应该是并行还是串行处理的。我们只是描述了我们想要什么，任务之间的关系是怎么样的，剩下的都是 promise 组件帮我们优化的.</p>

<p>事实上，很多在 async 的集合类模块可以很容易用一个列表的 promises 来替代。我们已经看到过 map 是怎么工作的了; 下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">inputs</span><span class="err">，</span><span class="nx">fn</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">results</span><span class="p">)</span> <span class="p">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p>和下面的是一样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">list</span><span class="p">(</span><span class="nx">inputs</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">fn</span><span class="p">))).</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>async.each() 其实就是用 async.map()，然后利用那些被执行的函数的副作用，而把它们的返回值舍弃掉; 你用 map() 就可以了.</p>

<p>async.mapSeries() (如前所述，async.eachSeries()) 其实就是对一个列表的 promises 上调用 reduce()。那就是，它你的输入列表，使用 reduce 来得到一个依赖于前面 promise 的操作成功后再执行的 promise。我们来举个例子: 实现一个基于 fs.rmdir() 的程序来实现和 rm -rf 相同的功能。下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dirs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a/b/c&#39;</span><span class="err">，</span><span class="s1">&#39;a/b&#39;</span><span class="err">，</span><span class="s1">&#39;a&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">mapSeries</span><span class="p">(</span><span class="nx">dirs</span><span class="err">，</span><span class="nx">fs</span><span class="p">.</span><span class="nx">rmdir</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p>和下面的是一样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dirs</span>     <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a/b/c&#39;</span><span class="err">，</span><span class="s1">&#39;a/b&#39;</span><span class="err">，</span><span class="s1">&#39;a&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">fs_rmdir</span> <span class="o">=</span> <span class="nx">promisify</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">rmdir</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rm_rf</span> <span class="o">=</span> <span class="nx">dirs</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="err">，</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">fs_rmdir</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="err">，</span><span class="nx">unit</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rm_rf</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 unit() 只是一个简单的返回一个已经处理的 promise 来开始整个操作链 (如果你知道什么是 monads，这个就是 promises 的返回函数):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// unit :: a -&gt; Promise a</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">unit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个使用 reduce() 的方案简单的使用接收列表中的两个路径值，并使用 promise.then() 来确保前面的文件夹删除成功之后，再删除后面的文件夹。这其实还帮你处理了非空文件夹的情况: 如果前面的 promise 因为任何错误而无法处理，那么整个处理流程就停止了。使用值的依赖关系来强制某种执行顺序是函数式编程使用 monads 来处理副作用的核心思想.</p>

<p>最后的代码似乎比同样功能的 async 代码更啰嗦，但别因为这样蒙骗了你。最重要的思想是我们通过使用 promise 数值和列表操作来组合程序，而不是依赖于特别的库来控制程序流。正如我们前面看到的，前一种方式可以写出更容易理解的程序.</p>

<p>前一种程序更容易理解是因为我们把我们思考流程的一部分交给机器去做了。当使用 async 模块的时候，我们的思考流程是这样的:</p>

<ol type="a">
<li>在程序里，我们的任务应该是这样相互依赖的,</li>
<li>因此，应该要这样把操作组织好,</li>
<li>那么，我们现在用代码来表现 B 所描述的流程.</li>
</ol>


<p>利用相互依赖的 promises 可以让你完全把 B 那步抛弃掉。你的代码只需要表达出任务的相互关系就可以了，然后让电脑来决定处理流程。换另一个说法就是，回调风格是显式的控制处理流程来把很多值组织在一起，而 promises 是显式表达出值的关系来把控制流的各个组件连接在一起。回调是指令式的，promises 是函数式的.</p>

<p>这个主题的讨论只有当我们谈到 promises 的最后一个使用场景，也就是函数式编程的核心思想，延时性，才算完整。Haskell 是一种惰性语言。它和那些从上往下执行的脚本程序不一样，它是从定义了程序最终输出的表达式开始的 – 有什么需要写到标准输出，数据库等，然后反回来向前执行。它首先看最终的表达式是依赖哪些表达式来取得它们的输入值的，然后一直往前遍历整棵树图，直到整个程序为了它的输出结果反过来计算出所需的所有数据为止。只有需要用到的数据才会在程序里计算出来.</p>

<p>很多时候，计算机领域的问题，最后找到的最佳解决方案都是需要找到最佳的数据结构来建模而得出来的。JavaScript 里有一个跟我刚才描述的情况非常相似的问题: 模块加载。你只想加载那些你的程序需要用到的模块，并且希望越快越好.</p>

<p>在我们有 CommonJS 和 AMD 这类有了依赖关系意识的规范前，我们有好一些脚本加载库。它们基本的工作原理都是像我们上面的例子一样，通过显式向加载器声明你要加载的脚本哪些是可以并行下载的，哪些是一定要按某种顺序下载。你基本上都要说清楚下载的策略，要正确并有效的做好的是相当困难的。相反，通过描述脚本之间的依赖关系来让加载器优化下载策略就会容易很多.</p>

<p>现在让我们来看看怎么实现 LazyPromise 的。这是一个 Promise，包含了一个可能会做异步操作的函数。这个函数只有在被调用 then() 这个方法的时候会被执行一次: 我们只有在有需要得到返回结果的时候才会开始执行。我们通过重写 then() 来判断一下如果还没有开始过的话就执行操作.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;rsvp&#39;</span><span class="p">).</span><span class="nx">Promise</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">util</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">LazyPromise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">factory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_factory</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_started</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">LazyPromise</span><span class="err">，</span><span class="nx">Promise</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">LazyPromise</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">then</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_started</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_started</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_factory</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="err">，</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span> <span class="nx">self</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">then</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="err">，</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如说，下面这个程序什么也不会做: 因为我们没有向 promise 取值，没有需要执行任何操作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">delayed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LazyPromise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Started&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="err">，</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="err">，</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如果我们添加了下面这一行代码，那么程序就会打印出 Started，然后一秒后再打印出Done，最后打印出42:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">delayed</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为中间的异步操作是只处理一次的，所以调用 then() 多次会打印最终结果多次，但不会每次再执行异步操作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">delayed</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'><span class="nx">delayed</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'><span class="nx">delayed</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prints:</span>
</span><span class='line'><span class="c1">// Started</span>
</span><span class='line'><span class="c1">// -- 1 second delay --</span>
</span><span class='line'><span class="c1">// Done</span>
</span><span class='line'><span class="c1">// 42</span>
</span><span class='line'><span class="c1">// 42</span>
</span><span class='line'><span class="c1">// 42</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过把以上简单的通用操作抽象出来，我们很容易就可以打造一个模块优化系统。想象一下我们要把一系列的模块这样处理一下: 每一个模块创建时都绑定了一个名字，一个它依赖的模块列表，和一个构造函数。这个构造函数会在执行时被传入所依赖的模块作为参数，然后返回本身这个模块的 API。这其实和 AMD 工作模式类似.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="err">，</span><span class="p">[]</span><span class="err">，</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">logBase</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">B</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="err">，</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doMath</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;B result is: &#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">logBase</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">C</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="err">，</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">doMath</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;C result is: &#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">logBase</span><span class="p">(</span><span class="nx">y</span><span class="err">，</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">D</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Module</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="err">，</span><span class="p">[</span><span class="nx">B</span><span class="err">，</span><span class="nx">C</span><span class="p">]</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="err">，</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">run</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">doMath</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">doMath</span><span class="p">(</span><span class="nx">x</span><span class="err">，</span><span class="nx">y</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们有了一个钻石模型图: D 依赖于 B 和 C，而它们两个又依赖于 A。这就意味着我们可以加载 A，然后并行加载 B 和 C，当 B 和 C 都加载完后，我们就可以加载 D 了。但是，我们希望我们的工具可以帮我们计算出来，而不是我们自己来实现这个策略.</p>

<p>我们可以通过把模块建模为 LazyPromise 的子类后很容易的实现。它的构造函数可以通过使用前面的列表 promise 辅助函数来取得它的依赖模块，然后在某一个延时后创建这些依赖模块来模拟异步加载的延时效果.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">DELAY</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Module</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="err">，</span><span class="nx">deps</span><span class="err">，</span><span class="nx">factory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_factory</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">list</span><span class="p">(</span><span class="nx">deps</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">apis</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-- module LOAD: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;-- module done: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="err">，</span><span class="nx">apis</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="err">，</span><span class="nx">api</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="err">，</span><span class="nx">DELAY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">Module</span><span class="err">，</span><span class="nx">LazyPromise</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为 Module 是一个 LazyPromise，单纯定义模块并不会加载任何东西回来。只有当我们需要开始使用的时候，加载才会执行:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">D</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="nx">d</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="mi">1000</span><span class="err">，</span><span class="mi">2</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prints:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// -- module LOAD: A</span>
</span><span class='line'><span class="c1">// -- module done: A</span>
</span><span class='line'><span class="c1">// -- module LOAD: B</span>
</span><span class='line'><span class="c1">// -- module LOAD: C</span>
</span><span class='line'><span class="c1">// -- module done: B</span>
</span><span class='line'><span class="c1">// -- module done: C</span>
</span><span class='line'><span class="c1">// -- module LOAD: D</span>
</span><span class='line'><span class="c1">// -- module done: D</span>
</span><span class='line'><span class="c1">// B result is: 9.965784284662087</span>
</span><span class='line'><span class="c1">// C result is: 0.10034333188799373</span>
</span></code></pre></td></tr></table></div></figure>


<p>正如你所见到的，A 首先加载，当它完成后 B 和 C 开始同时下载，然后当它们都加载完后  D 开始加载，正如我们想要的那样。如果你只是执行 C.then(function() {})，你可以看到只有 A 和 C 加载; 关系图里没需要用到的是没有加载的.</p>

<p>所以，基本上不需要太多代码，只需要定义好懒 promises 的关系图，我们就实现了一个正确的模块加载器。我们使用的是函数式编程里面的定义值的依赖关系这种方式，而不是显式控制程序执行顺序的方式来解决问题，并且这种方式比起自己控制执行流程更加容易。你可以给出任何非循环依赖关系图来让这个模块加载库帮你优化执行顺序.</p>

<p>这才是 promises 的真正强大之处。它们并不仅仅从语法层面减少代码嵌套。它们让你再更高的层面来为你的问题抽象建模，和让你的工具帮你做更多的工作。事实上，那应该是我们必须向我们的软件提出的要求。如果 Node 真的希望把并行编程更容易的话，它们应该重新考虑一下 promises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thanks to everyone, Zach Lendon, Github, AngularJS]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/09/24/thanks-to-everyone-zach-lendon-github-angularjs/"/>
    <updated>2013-09-24T06:24:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/09/24/thanks-to-everyone-zach-lendon-github-angularjs</id>
    <content type="html"><![CDATA[<p>Today I just wander around Google Analytics to check my blog&rsquo;s visits count.  I am so pleased to find that the visit counts keeps increasing.  Below are some figures:</p>

<ol>
<li>Total Visits <strong>616</strong></li>
<li>Unique Visitors: <strong>555</strong></li>
<li>Pageviews: <strong>793</strong></li>
<li>Pages / visit: <strong>1.29</strong></li>
<li>% New Visits: <strong>88.31%</strong></li>
</ol>


<p>Thanks to everyone who visited my blogs and made all those suggestive comments, such as Da.  I will strive to write more valuable articles to keep my knowledge and help others.  Hopefully, the return visits can grow more.</p>

<p>I happened to found that This particular <a href="http://www.thinkingincrowd.me/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend/">article</a> about <a href="http://angularjs.org">AngularJS</a> <a href="http://docs.angularjs.org/api/ngMock.$httpBackend">$httpBackend</a> brought me <strong>215</strong> visits.  I think that should be due to a patch I submitted to AngularJS in <a href="https://github.com">Github</a>.  How valuable for that patch!!  I will try to contribute more to the opensource.</p>

<p>Personally, I need to thank Zach Lendon who has referred my blog in his article about <a href="http://zachlendon.github.io/blog/2013/04/02/updated-extjs4-mock-ajax-library-for-jasmine/">ExtJS4 Ajax testing</a>.  His referral brought me <strong>8</strong> visits.  I originally want to thank him in his blog but there is no comments enabled there.  So here gives my sincere thanks too.</p>

<p>Do not ask but give.  You will earn more.  Thanks guys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to support page content i18n in AngularJS]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/08/29/how-to-support-page-content-i18n-in-angularjs/"/>
    <updated>2013-08-29T20:16:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/08/29/how-to-support-page-content-i18n-in-angularjs</id>
    <content type="html"><![CDATA[<p><a href="http://code.angularjs.org/1.0.8/docs/guide/i18n">i18n</a> (Internationalization) is one of the development guide section in AngularJS.  However, the doc doesn&rsquo;t really help us a lot to do what we want basically for i18n, language change support of the web page content.</p>

<p>As an <a href="http://en.wikipedia.org/wiki/Single-page_application">SPA</a> (Single Page Application), the view in <a href="http://angularjs.org">AngularJS</a> is partially loaded, rendered and even cached at client side.  When user switches the language, how can we rerender the page with another language?</p>

<p>My idea is to make the label or web page content as a binding model linked with the language.  If the language value is changed when users switch language, those label models should be updated.  It works smoothly but I haven&rsquo;t done performance test for extremely large page yet.</p>

<p>Let&rsquo;s see how it&rsquo;s done.</p>

<p>First, I need to define a Service which is used to fetch language resource file, cache them locally, and do the translation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;LocaleManager&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">langs</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nx">LocaleManager</span> <span class="o">=</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;/js/i18n/resources-locale_:lang.js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">port</span><span class="o">:</span> <span class="s1">&#39;:3000&#39;</span><span class="p">,</span> <span class="nx">lang</span><span class="o">:</span> <span class="s1">&#39;en_US&#39;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">LocaleManager</span><span class="p">.</span><span class="nx">load</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">language</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">langs</span><span class="p">[</span><span class="nx">language</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">language</span> <span class="o">!==</span> <span class="nx">language</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">language</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">LocaleManager</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span><span class="nx">lang</span><span class="o">:</span> <span class="nx">language</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">langs</span><span class="p">[</span><span class="nx">language</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">language</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">LocaleManager</span><span class="p">.</span><span class="nx">getText</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">language</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">language</span> <span class="o">===</span> <span class="s1">&#39;en_US&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">langs</span><span class="p">[</span><span class="nx">language</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">langs</span><span class="p">[</span><span class="nx">language</span><span class="p">][</span><span class="nx">text</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">langs</span><span class="p">[</span><span class="nx">language</span><span class="p">][</span><span class="nx">text</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">LocaleManager</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find that there is a <a href="http://code.angularjs.org/1.0.8/docs/api/ng.$rootScope">$rootScope</a> level variable <em>language</em>  which is set to the user selected language when <em>LocaleManager.load</em> is called.</p>

<p>Later if we use the <a href="http://code.angularjs.org/1.0.8/docs/api/ng.$interpolate">$interpolate</a> like below in the view, the text value can be updated whenever the <em>$rootScope.language</em> is changed.</p>

<pre><code>{{ LocaleManager.getText('Login', language) }}
</code></pre>

<p>An alternative approach is to define a <a href="http://docs.angularjs.org/api/ng.$filter">$filter</a> for translation instead of calling a method from Service class.  Haven&rsquo;t tried that yet and will give an update here once done.</p>

<p>Do you have experience on i18n in AngularJS?  Thoughts and comments are appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[至关重要的关系]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network/"/>
    <updated>2013-06-29T07:59:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network</id>
    <content type="html"><![CDATA[<p>经过<a href="http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta/">前面</a>的自我打造后，现在就要建立<a href="http://www.amazon.cn/dp/B00COJ3CVY">至关重要的关系</a>了。</p>

<h2>比能力重要</h2>

<p>其实我本人对＂关系＂这个词自然而然的会持否定的态度，因为在很多地方，很多人靠不正当关系和手段，谋取职位或升迁。我不喜欢靠＂关系＂，所以才当程序员，才不去国企，和在小公司待那么久。但工作8年以来，我确实靠关系得到不少机会。正如书中所说：</p>

<blockquote><p>斯坦福大学组织行为学教杰弗瑞•菲弗 (Jeffrey Pfeffe) 搜集整理的证据表明人们在升职的时候，人际关系过硬以及与老板的友好关系比能力更重要。这并不是无法无天的任人唯亲和权术 (尽管有时候很不幸确实如此) ，这种做法有令人信服的理由：一个稍许平庸但能很好地处理人际关系并为团队做贡献的人比一个百分之百能力但无法进行团队合作的人对公司更有利。</p></blockquote>

<p>不过这些必须是靠能力建立起来的过硬的关系，要不然就真的是＂不正当关系＂了，并不能持久。</p>

<h2>如何建立</h2>

<h3>被动式</h3>

<p>如果你懒得建立与维护人脉，那就用 <em>@蔡学墉</em> 一段微博总结的方法吧：</p>

<blockquote><p>设法让自己能力强大，把自己变成值得被他人所利用的资源。这么一来，虽然不一定过得太好，但肯定不会过得太差。</p></blockquote>

<h3>付出</h3>

<p>我之前建立的关系，虽然不是完全这样被动式，但也只是在工作中，任劳任怨，努力把自己变优秀，树立好的形象，并主动帮助别人，分享自己的知识。我之前并不觉得有什么特别，但看了这本书后，才知道其实已经用了书中说的最好的方法，就是<strong>真心帮助别人</strong>。日前，一位其实和我并不太熟悉的旧同事，在跳槽的时候，竟然打电话给我，咨询我的意见，这真是让我觉得颇为惊讶。回头一想，自己能被当作值得信赖或听取一点建议的对象，几年的努力，值得了。</p>

<h3>不烦人</h3>

<p>一直以来，我都没有刻意去扩大自己的网络。除了因为上面说的一些偏见和我确实认为我没什么技巧去做这些事情外，其实我是内向型的人，就是别人没有对我表示出善意的情况下，我是基本不会先迈出第一步的，还有我很怕会烦到别人。</p>

<p>但书中其实有说：</p>

<blockquote><p>你一点也不烦人。</p>

<p>如果说巩固某段关系最好的办法是帮助对方，那么位居第二的方法就是接受对方的帮助。正如本•富兰克林曾说过的：＂如果你想交朋友，让别人帮你个小忙。＂</p></blockquote>

<p>所以呢，我决定今后多一点去＂打搅＂一些人。各位要有心里准备哦。</p>

<h2>优质关系网</h2>

<p>人际关系理论中有个很出名的邓巴数 (Dunbar&rsquo;s number)，说的是我们每个人可以维持的关系数目最多不超过150个。而且还有个六度分隔理论，就是平均只要通过六个人，你就可以联系到地球上任何一个人。</p>

<p>虽然说六度分隔理论，理论上可以让你联系到任何人，但其实链条后面一些关系并不能对你的事业起什么大的作用。能极大影响你的事业和获取信息的是人际关系是前三层，就是一直延伸到你的好朋友(第一层)的好朋友(第二层)的好朋友(第三层)。所以，如果邓巴数里说的主要是你的第一层强关系，算上之后两层的话，你的关系网络数目会远大于邓巴数。这三层中彼此之间都有至少一个强关系纽带，相互认识和引荐的可能性非常高，因为彼此有足够了解和信任。当然强关系中很多是重合的，就是你好朋友的好朋友本来就是你的好朋友。而且可能你们的圈子相近，那么他们获取的信息，可能你也知道了的。</p>

<p>所以书中提及另一种关系 &ndash; 弱关系，既是那些和你接触不多的人。它比强关系占优的地方是可能可以给你提供额外消息来源。所以如果要结合两种优点，我们必须尝试寻找一些其他圈子来建立强关系，这就需要我们去参加一些社团之类的活动了。</p>

<p>所以，基于自己在这方面的短板，我也已经尝试去参加一些行业会议，社区和非自己行业但感兴趣的活动群体，比如英语学习的。我也正在尝试围绕自己，寻找志同道合者，建立一个分享机遇和资源的网络。其实要打造一个网络很难，我一直想做，但都没能做好。鹄言乱语社区刚筹备，看能否得到各位好友支持了。</p>

<p>优质网络的基本要求：</p>

<blockquote><p>第一，每个人都很优秀。<br/>
第二，每个群体都有一个共同特征，&hellip; 指引大家走到一起。<br/>
第三，地理密度也很重要。<br/>
第四，分享和合作风气浓厚。</p></blockquote>

<p>从实际情况看，这种优质网络的起源，基本都是在同一公司干过，并同甘共苦之人，比如著名的 PayPal 黑手党。所以，恰当的跳槽，对打造网络也是有好处的。</p>

<h2>机遇</h2>

<p>如果能力上来了，而且关系网能基本建立起来，机会就会逐渐来临了。</p>

<blockquote><p>企业家博•皮博迪 (Bo Peabody) 曾说过：＂让幸运来临的最好做法是确保很多事情发生。＂</p></blockquote>

<p>所以说，<strong>机会给有准备的人</strong>，我觉得其实一方面的意思是你要通过自己不断地努力尝试，去主动制造而来的。</p>

<p>有了机会，其实等于你面前多了一项选择。那你选择什么，是否决定承担某种风险而改变原来的规划，就涉及到风险评估了。</p>

<h2>风险</h2>

<p>我个人应该是偏保守的，做事情都想得比较多，看哪种选择能带来最大好处。而且比较犹豫，不够果断。因为我比较怕有什么风险。但其实我们通常会高估风险 (可能不适用于一些盲目炒股人士，呵呵) 。</p>

<blockquote><p>神经心理学家里奇•汉森 (Rich Hanson) 是这么说的：＂为了让我们的祖先存活，大自然母亲会时不时地玩弄一下他们，让他们犯三个错误：过高估计风险、过低估计机遇、过低估计资源 (资源是用来应对风险、好好利用机遇的) 。＂</p></blockquote>

<p>一般希望稳定的人，都不希望有变动。但这有可能恰恰是更危险的。所以，个人认为所谓稳定的公务员，国企什么的，一些没什么解聘机制的单位，将来风险很高。我们一定要有永久测试心态，适时变动。</p>

<blockquote><p>从短期来看，变动少其实也是一种稳定。从长期来看，变动少很容易导致不堪一击，因为它会减弱系统对突发状况的应对能力。</p></blockquote>

<p>还有就是一般认为，有多几种后备方案，风险就小点。但其实这和<a href="http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta/">前面</a>说到的＂粗糙＂的心是相违背的。正如我们学习编程语言，如果说打算学学这，学学那，然后什么工作都能找到的话，往往是什么工作都找不到。</p>

<blockquote><p>＂保留多重选择＂实际上比专心将一项计划付诸实践更具有风险。</p></blockquote>

<p>回首自己工作来最大的机遇，可能是之前一位旧老板邀请我去上海和他创业。不过当时放不下另一个在香港的机遇，因为当时自我定位不同，对旧公司的忠心，和对家人的考虑，没接受，有点遗憾。因为在珠海确实没什么 IT 氛围和环境，对自我成长有比较大的约束。但其实也没有后悔，因为家人还是最重要的，继续在自己可接受风险范围寻求突破吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[永久测试之心, 寻求真我]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta/"/>
    <updated>2013-06-26T06:39:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta</id>
    <content type="html"><![CDATA[<p>最近看了李开复作序的书：<a href="http://www.amazon.cn/dp/B00COJ3CVY">至关重要的关系</a>，也就是<a href="http://www.amazon.com/dp/B008NXKYNO">THE START-UP OF YOU</a>的译本。书的英文原名和它的意图其实想说明的是，每个人其实都是和企业家一样，具备相同的特质。</p>

<blockquote><p>广义的企业家精神：自主独立，足智多谋，满怀抱负，灵活变通，并拥有广泛的人脉。企业家精神是一种生活态度，而不是一个商业概念；是伴随一生的观念，而不只是某一代人的想法。</p></blockquote>

<p>这本是 <a href="www.linkedin.com">LinkedIn</a> 创始人 Reid Hoffman 和 硅谷企业家 Ben Casnocha 一起写的书。其实书的内容并不只讲述如何建立重要的人际网络关系，还阐明当前变幻无常的职业环境下，怎么样才能保持竞争力。不知道怎么译成中文书名，就变成只突出关系了，可能为了迎合国内对关系的依赖心理吧。</p>

<blockquote><p>你的竞争优势是由三种各不相同且不断变化的力量相互作用而形成的：你的资产、你的追求/价值观和市场现实，即你的综合能力在竞争市场的供应状况。</p></blockquote>

<h2>真我，追求</h2>

<p>书中一段让我非常有感触：</p>

<blockquote><p>你的内心不存在能通过自省发现并为你指明正确方向的＂真我＂。是的，你的追求塑造了你所做的事，但是追求本身就受到你的行动和经历的限制。个性不是你找到的，而是自己浮现的。</p></blockquote>

<p>其实我一直想通过自省来寻找到自我，但发觉真的太难了。身边也缺乏很好的 Mentor，所以一直感觉有点迷茫。我到底应该怎么前行呢？直到看完上面那段话后，终于可以释怀了。回想起前段日子看到 <em>@玉伯也叫射雕</em> 说的＂心要粗糙点＂，<em>@周鸿玮</em> 的这篇<a href="http://m.blog.sina.com.cn/s/blog_49f9228d0101c9pr.html?retcode=0">不喜欢的工作，可能通往一个崭新世界</a>，和自己迷茫前走过的路程，也确实是这么走过来的。</p>

<p>高考时我就是想考计算机专业，没什么理由。毕业时就是想转行从事软件开发，而不是专业的电子方向 (没考上计算机)。还有就是大学时出国留学的想法以至狂学 TOEFL 和 GRE。 至今我也不知道当时为什么这么想，只是有点一根筋的感觉。</p>

<p>之前的工作生涯，领导让做什么我就做什么，说去哪个项目就到哪去，不挑活，只认真干。当时的＂真我＂就是做 BA 或者 Consultant (以前感觉那种职位比码农高级点，现在发现沟通和需求分析根本就是码农必备技能)，而且公司也是主靠这部分业务，所以个人在公司发展可以说一帆风顺。快速学习和解决问题的能力，抗压能力，良好沟通能力也同时在这样情况下培养出来。</p>

<h2>永久测试之心</h2>

<blockquote><p>把职业始终保持在测试阶段，可以强迫自己承认自身还有缺陷，还存在发展空间，还需要适应和进步。不过，这种心态也十分乐观，因为这意味着你有能力改善自己，同时也有能力改变周围的世界。</p></blockquote>

<p>永久测试其实是对非常流行的观点＂我们必须找到自己心中真正的优势和渴望做的事情，然后坚持不懈的努力下去，终将取得非凡成就＂进行必要的一些补充和修订。</p>

<p>虽然如上面所说，自我/价值观需要坚定的去追求，但它也不是一成不变的。因为一开始我们的追求可能是空泛的，含糊的，没有具体步骤和验证过的。我们有时可能只是想当然认为自己想做什么，可以做什么，但不知道能不能做或怎么做。所以必须在实践中验证，也就是不断测试调整的一个过程。</p>

<p>永久测试其实也是应对市场现实而提出的要求。如果你的优势和能力，并没有市场需求的话也是白搭。其实这个观点和 <a href="http://www.amazon.com/dp/0307887898">LEAN STARTUP</a> 里面的 Build-Measure-Learn 这样一个反馈循环正是异曲同工之处。因为我们面对的是迅速变化的市场和趋势，我们必须像打造一个产品一样，不断测试我们身上的技能是否还满足市场的需求。</p>

<p>之前从一家毕业后一直工作了7年的公司离职，除了公司一些长久问题，个人已经不太抱希望管理层能解决外，也是感觉需要去外面的世界看看，测试一下自己能否适应市场的需求。后来面试发现，在珠海这个地方，需要多面手的地方不多，自己看重的广泛技能，英语，沟通和快速学习能力并没多少人欣赏。招聘方看你那么多年经验，基本就是看你在他们想要的技术方面，能深入多少，因为他们多数要的是专才。</p>

<p>但这却是我的短板。我并没哪项技术钻研的很深，脚踏的不够坚实。其实我之前也一直缺乏一定自信，总觉得底气不够。所以，我也就正好调整了一下＂真我＂，决心专攻某一样技术，JS。今后嘛，还是保持一颗<strong>钝</strong>和<strong>粗糙</strong>的心，坚持下去并测试以验证之。</p>

<blockquote><p>在任何情况下，能够检验我们设想的是行动而非计划。只有在实践过程中才能找到自己努力的方向以及方法。</p></blockquote>

<h2>ABZ计划</h2>

<p>这是作者提出来的一种规划手段。</p>

<ul>
<li>A计划：是我们目前从事的事业，一个我们发挥竞争优势的地方。但是在计划执行过程中，我们还是需要时刻根据情况微调，还有试探性寻求B计划。</li>
<li>B计划：在执行A计划途中，如果发现目标或实现途径出现比较大的变化，甚至说客观环境发生重大变动等，就要跳到B计划了。但是B计划从哪冒出来的？其实在不断学习和调整方向中得到。它应该是和A计划不同但相关的方向。最好的方式是在执行A计划同时，从兼职开始做起，试探性去尝试一些想法。这个计划不是仔细计划出来的，而是摸索出来的。</li>
<li>Z计划：这已经是我们的最差打算了。就是万一失业了，什么都没有了，我们可以怎么做？银行剩下的钱可以支撑多少个月没工作？这段时间是否足够学新技能？</li>
</ul>


<p>其实作者强调的就是<strong>不断学习，寻找和调整方向，而且确保有救生方案支撑转变</strong>。</p>

<h2>确立身份</h2>

<blockquote><p>我们应该确立一种身份地位，使其不受老板、地域以及行业的影响。</p></blockquote>

<p>这也是文章里让我觉得很重要的一句。因为当今，及往后的职业发展环境，是＂横向＂忠于职业，而非＂纵向＂忠于老板。当然这并非说朝三暮四，到处跳槽。因为无论在哪就职，为所在企业全力拼搏，也是提高自我竞争力，打造人脉的关键。而作者想强调的是，因为世界变化太快了，每个企业，每个行业都有可能发生巨大变化和转折点，比如数码相机的到来导致柯达的没落；智能手机的出现，使得 Nokia 被抛离。所以这种独立于老板，甚至是行业的自身技能身份定位，为日后应对市场变化非常重要。</p>

<p>所以，对于我们从事 IT 的人来说，写个博客，多参于一些开源项目和活动，做些工作外的作品，是很有必要的。</p>

<p>确保自身技能跟得上变化后，剩下的就是关系问题了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function definition, this and bind in JavaScript]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/06/14/function-definition-this-and-bind-in-javascript/"/>
    <updated>2013-06-14T20:00:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/06/14/function-definition-this-and-bind-in-javascript</id>
    <content type="html"><![CDATA[<p>I thought I know the Function definition, execution context and the behavior of <em>this</em> in JavaScript.  However, I realized that actually I don&rsquo;t or the knowlege is still not firmly grounded in my mind when I wrote some code similar to below snippet but have no instinct of the error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">TestObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result will be as below, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">B</span>
</span><span class='line'><span class="nx">A</span>
</span><span class='line'><span class="nx">B</span>
</span><span class='line'><span class="nx">A</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might suspiciously answer No but If your instint doesnot tell you that and why, then you don&rsquo;t know JavasScript well either like me.  The result actually is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">B</span>
</span><span class='line'><span class="nx">A</span>
</span><span class='line'><span class="nx">B</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nb">Object</span> <span class="p">[</span><span class="nx">object</span> <span class="nx">global</span><span class="p">]</span> <span class="nx">has</span> <span class="nx">no</span> <span class="nx">method</span> <span class="s1">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is a little bit awkward or counterintuitive at first glance but it&rsquo;s JavaScript.  It&rsquo;s the feature and amazing part.  Let&rsquo;s break it down piece by piece and see why.</p>

<h2>Function definition</h2>

<p>The <em>TestObj</em> includes two methods.  The Function definition there actually creates two anonymous functions and then the references to the functions are assigned to the properties <em>a</em> and <em>b</em>.  Those two functions are not owned by <em>TestObj</em> and just referred by the two properties of <em>TestObj</em>.  This is the most important part causes the confusion.  Hence, above code has not much difference than below except now we assign a name <em>B</em> for one of the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">B</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">TestObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="nx">B</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>this</h2>

<p>In <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</a> edition 5.1:</p>

<blockquote><p><strong>10.4.3 Entering Function Code</strong><br/>
The following steps are performed when control enters the execution context for function code contained in
function object F, a caller provided thisArg, and a caller provided argumentsList:</p>

<ol>
<li>If the function code is strict code, set the ThisBinding to thisArg.</li>
<li>Else if thisArg is null or undefined, set the ThisBinding to the global object.</li>
<li>Else if Type(thisArg) is not Object, set the ThisBinding to ToObject(thisArg).</li>
<li>Else set the ThisBinding to thisArg.<br/>
&hellip;</li>
</ol>
</blockquote>

<p><em>this</em> is a special keyword refers to the binding object in the current execution context of the Function.</p>

<p>Once we invoke the Function through Object method, the <em>this</em> inside the Function body actually has been set to the <em>TestObj</em> instance.  Hence, <em>TestObj.b()</em> logs B and A consecutively because <em>this.a</em> exists as a property of <em>TestObj</em>.</p>

<p>However, below statements mean differently.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, variable <em>c</em>  is just another reference pointing to Function B.  Hence <em>c()</em> is same as <em>B()</em>.  When directly invoking Function B, the <em>this</em> is bound to global object.  Because there is no <em>a</em> defined in the global object, error occurs.</p>

<h2>How to set a particular object as <em>this</em> to function</h2>

<p>It&rsquo;s commonly known that <em>call</em> and <em>apply</em> method can be called on the Function object providing a specific object as <em>this</em>, say:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">TestObj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is desirable.  However, this approach invokes the Function immediately.  This is normally not the case that a Function has to be assigned to a Reference and passed around which is meant to be executed dynamically, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">dynamic</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dynamic</span><span class="p">(</span><span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we should not use <em>fn.call(TestObj)</em> or <em>fn.apply(TestObj)</em> because it&rsquo;s a generic Function which should have no knowledge on the Function passed in.  Hence, above is not working.</p>

<p>There is still another lifesaver though.  The <em>bind</em> method of Function.  This method can take the passed in Object like what <em>call</em> or <em>apply</em> does, but it returns a new Function whose <em>this</em> binding is set to the Object passed in.  So, above code can be revised as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">dynamic</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dynamic</span><span class="p">(</span><span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">TestObj</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s fun, isn&rsquo;t it?</p>

<p>[Edited on 2013/06/17]: Today, I saw another case which maybe confusing too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">logLength</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">TestObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">length</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="nx">logLength</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">c</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]();</span>
</span><span class='line'>        <span class="p">})(</span><span class="nx">logLength</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">TestObj</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
</span><span class='line'><span class="nx">TestObj</span><span class="p">.</span><span class="nx">c</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think the console should log?  Will it be <em>2</em> and <em>3</em>?  Actually, the result is <em>2</em> and <em>1</em>.  Because the <em>TestObj.c()</em> actually is calling the function <em>logLength</em> on the arguments Object, and then the <em>this.length</em> is referring to its own length, which is <em>1</em>.</p>

<p>More fun, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to verify JSON data with AngularJS $httpBackend]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend/"/>
    <updated>2013-06-08T22:17:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend</id>
    <content type="html"><![CDATA[<p>When we are writing Unit Test for AngularJS Controller or Service, it&rsquo;s pretty common to verify the data posted to server using <a href="http://docs.angularjs.org/api/ngMock.$httpBackend">$httpBackend</a> in ngMock module.</p>

<p>Consider the most common method: <em>expect(method, url, data, headers)</em>, from the doc, we find that the data is expected to be either <em>String</em> or <em>RegExp</em>.</p>

<blockquote><p><strong>expect(method, url, data, headers)</strong><br/>
Creates a new request expectation.</p>

<p>Parameters<br/>
* method – {string} – HTTP method.<br/>
* url – {string|RegExp} – HTTP url.<br/>
* data(optional) – {(string|RegExp)=} – HTTP request body.</p></blockquote>

<p>So normally, below simple case is working as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost/timeEntry&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s1">&#39;Done&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;http://localhost/timeEntry/&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost/timeEntry&#39;</span><span class="p">,</span> <span class="sr">/te/g</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s1">&#39;Done&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;http://localhost/timeEntry/&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, in real application, the data posted to server is normally in JSON format.  How do we verify JSON data then?  Actually, if we look into the source of the <em>angular-mocks.js</em>, it supports JSON data too although it&rsquo;s not documented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">matchData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">angular</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">&amp;&amp;</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">test</span><span class="p">))</span> <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">angular</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span> <span class="k">return</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">toJson</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">==</span> <span class="nx">d</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">data</span> <span class="o">==</span> <span class="nx">d</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So below sample also works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost/timeEntry&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;Ken&#39;</span><span class="p">,</span> <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;Chen&#39;</span><span class="p">}).</span><span class="nx">respond</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s1">&#39;Done&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;http://localhost/timeEntry/&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">({</span><span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;Ken&#39;</span><span class="p">,</span> <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;Chen&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we see, the JSON data validation requires the JSON data posted to be exactly the same as the expect value provided.  How if the JSON data posted is different on each posting, say guid or timestamp field is contained, and we want to verify whether the JSON data is valid based on our special valiation logic?</p>

<p>Here is the hack to make AngularJS take our special validation logic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hasMinimumFields</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">entry</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">StringUtil</span><span class="p">.</span><span class="nx">isNotBlank</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">StringUtil</span><span class="p">.</span><span class="nx">isNotBlank</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">desc</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="nx">StringUtil</span><span class="p">.</span><span class="nx">isNotBlank</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">lastUpdateOn</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">StringUtil</span><span class="p">.</span><span class="nx">isNotBlank</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isNewEntry</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">entry</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">hasMinimumFields</span><span class="p">(</span><span class="nx">entry</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="s1">&#39;P&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">desc</span> <span class="o">=</span> <span class="s1">&#39;Hello there&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">test</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">entry</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">fromJson</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">desc</span> <span class="o">===</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">desc</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">Validator</span><span class="p">.</span><span class="nx">isNewEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost/timeEntry&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s1">&#39;Done&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">saveEntry</span><span class="p">();</span> <span class="c1">// Let&#39;s assume this method will post the data with model $scope.desc</span>
</span><span class='line'><span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The hacking as you see is to take advantage of the <em>test</em> method which the <em>RegExp</em> has and AngularJS uses for data matching.  But when the data is not posted as expected, the Unit Test fails with below message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Chrome</span> <span class="mf">27.0</span> <span class="p">(</span><span class="nx">Linux</span><span class="p">)</span> <span class="nx">Unit</span><span class="o">:</span> <span class="nx">Controllers</span> <span class="nx">Test</span> <span class="nx">EntryCtrl</span> <span class="nx">should</span> <span class="nx">start</span> <span class="nx">entry</span> <span class="k">in</span> <span class="nx">correct</span> <span class="nx">format</span> <span class="k">if</span> <span class="nx">only</span> <span class="nx">entry</span> <span class="nx">desc</span> <span class="nx">is</span> <span class="nx">filled</span><span class="p">.</span> <span class="nx">FAILED</span>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Expected</span> <span class="nx">POST</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost/timeEntry with different data</span>
</span><span class='line'><span class="nx">EXPECTED</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">GOT</span><span class="o">:</span>      <span class="p">{</span><span class="s2">&quot;status&quot;</span><span class="o">:</span><span class="s2">&quot;P&quot;</span><span class="p">,</span><span class="s2">&quot;actualStartOn&quot;</span><span class="o">:</span><span class="s2">&quot;2013/06/08T21:24+0800&quot;</span><span class="p">,</span><span class="s2">&quot;desc&quot;</span><span class="o">:</span><span class="s2">&quot;First Unit Test&quot;</span><span class="p">,</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;3849ae1a-4b9c-40be-baa0-60eeaf3af430&quot;</span><span class="p">,</span><span class="s2">&quot;lastUpdateOn&quot;</span><span class="o">:</span><span class="s2">&quot;2013/06/08T13:24:44.104+0000&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This error message is not quite developer friendly and it doesn&rsquo;t tell you much about why it failed at first glance.  However, if we make the test data contain the JSON value too, the expect message would be more meaningful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">desc</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">desc</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;P&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;SHOULD NOT BLANK&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastUpdateOn</span><span class="o">:</span> <span class="s1">&#39;SHOULD NOT BLANK&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">test</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">entry</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">fromJson</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">desc</span> <span class="o">!==</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">desc</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">Validator</span><span class="p">.</span><span class="nx">isNewEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">EXPECTED</span><span class="o">:</span> <span class="p">{</span><span class="s2">&quot;desc&quot;</span><span class="o">:</span><span class="s2">&quot;First Unit Test&quot;</span><span class="p">,</span><span class="s2">&quot;status&quot;</span><span class="o">:</span><span class="s2">&quot;P&quot;</span><span class="p">,</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;SHOULD NOT BLANK&quot;</span><span class="p">,</span><span class="s2">&quot;lastUpdateOn&quot;</span><span class="o">:</span><span class="s2">&quot;SHOULD NOT BLANK&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>[Edited on Aug 09th 2013]</em>: After AngularJS accepted my <a href="https://github.com/angular/angular.js/pull/2981">pull request</a> to support Function as validation data last week, we don&rsquo;t need to use duck-typing for the hack.  The validation logic can be simplified as below and we can even override the Function&rsquo;s <em>toString()</em> method to give more expressive error message in a cleaner way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">entry</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">fromJson</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">desc</span> <span class="o">!==</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">desc</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">Validator</span><span class="p">.</span><span class="nx">isNewEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;The status of the new entry should be &quot;P&quot;, desc should be &quot;&#39;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">desc</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;&quot; and its id &amp; lastUpdateOn should not be blank.&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">EXPECTED</span><span class="o">:</span> <span class="nx">The</span> <span class="nx">status</span> <span class="nx">of</span> <span class="nx">the</span> <span class="k">new</span> <span class="nx">entry</span> <span class="nx">should</span> <span class="nx">be</span> <span class="s2">&quot;P&quot;</span><span class="p">,</span> <span class="nx">desc</span> <span class="nx">should</span> <span class="nx">be</span> <span class="s2">&quot;First Unit Test&quot;</span> <span class="nx">and</span> <span class="nx">its</span> <span class="nx">id</span> <span class="o">&amp;</span> <span class="nx">lastUpdateOn</span> <span class="nx">should</span> <span class="nx">not</span> <span class="nx">be</span> <span class="nx">blank</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一点点对提问，分享和影响力的看法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/05/28/how-to-ask-share-and-influence/"/>
    <updated>2013-05-28T21:48:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/05/28/how-to-ask-share-and-influence</id>
    <content type="html"><![CDATA[<p>一晚和一位旧同事在 KFC 从10点夜谈到凌晨 3 点。很久没那么年轻过了。我们谈了什么？ 主要是提问，指导和分享，人格魅力和影响力，投资等方面。</p>

<h2>提问，指导和分享</h2>

<p>谈这个问题的起源是因为他刚换工作，觉得某些＂领导＂交代任务的时候，啥都不说清楚，什么相关文档资料都不给。所以他很郁闷地在想，到底是他太笨还是本该交待的没说清楚。后来直到他去问时，对方才像挤牙膏那么挤出来那么一点指引，和给他本该先交出的文档。</p>

<p>到底应该怎么问问题，怎样才算是好的指导和分享呢？</p>

<h3>什么该交代</h3>

<p>对于交代任务，到底什么应该说清楚？ 从我的自身体验来讲，无论对方是否对所要交代的任务有经验，任务<strong>需求</strong>和项目内<strong>约定俗成</strong>的东西，比如代码规范，公司或项目里特殊的工具环境配置，代码库结构等，是必须交代清楚，至少文档齐备。当然还有一个是任务的<strong>时间要求</strong>，因为这是提供给接收任务方做好时间安排和判断应该什么时候寻求帮助的重要条件。如果这些东西缺失了，就是交代任务的人的责任了。</p>

<p>我一般的做法，是先把文档给出去，可是不会先详细说明。这是因为不同的人，对资料吸收能力不同，我会期望任务接收者先花时间看了，心中有了问题，再针对情况进一步决定是否需要更进一步解说。这样既有针对性，还可以用以初步判断一个人的自学和领悟能力。</p>

<h3>什么可以问，怎么问</h3>

<p>对于接收任务的一方来说，如果发现上面提到的应有资料有缺失，我觉得是完全可以而且应该先索取和问清楚，因为你不具备这个责任和条件知道这方面的知识。</p>

<p>拿到资料后，通常在问问题之前，我觉得都必须<strong>认真看过资料 30 分钟到 1 小时的时间</strong>。时间短了，感觉并不能了解清楚；时间长了，如果对文档所说的还是没什么头绪的话，就不应该再闷头苦猜，而是应该求教于交代任务的人，以避免浪费无谓时间。毕竟工作任务都是有时间限制的。</p>

<p>在看资料的时候，我觉得需要了解的，是各个文档的大概内容，相互关系和在任务里各自起的作用。完后，就可以向交代任务的人确定任务开始的方向和提出看文档后产生的具体疑问了。问问题，最好是可以<strong>一次把所有问题有条理的列出来，一次去问。而不是碰到一个问题，问一个</strong>。</p>

<p>正如前面提及，你问的问题，交代任务的人可以用以推断你的能力。需求方面的问题，可以推断出你的逻辑思维能力和对业务的理解。这方面的问题，一开始的时候不懂，是情有可原的，因为毕竟缺乏业务背景。系统设计或技术方面的问题，就可以看出你的经验，技术功底了。对于行业公共技术，应先尽可能 Google 找资料，没办法了，再去问，一方面避免问了些小白问题，另一方面可以提高自己学习能力。对于公司内部特有的技术或框架，我觉得能理解当然最好，时间紧迫的话，求助也无妨。</p>

<h3>怎样才算是好的指导和分享</h3>

<p>当同事或下属向你请教，或者你发现他们有什么地方做的不够好的时候，及时向他们提供指导和经验分享，才是一位称职的专业人士。但是怎样的指导才叫好呢？那晚，那个同事和我提到他之前遇到的几种指导的风格：</p>

<ol>
<li><p>手把手风格<br/>
 这种指导方式，是每个新手最喜欢的。因为领导事无巨细，把要完成任务的每一个步骤，都详细解说一遍。最重要的是，讲到你明白为止，而且还是极有耐心，毫无怨言那种。</p></li>
<li><p>详尽风格<br/>
 这种风格，也会交代出要完成任务的主要步骤，只是没那么详尽，所以也不会向第一种那样毫无怨言的讲到明白为止啦。</p></li>
<li><p><strong>启发性风格</strong><br/>
 这种风格，只会提示重要的点或者步骤，甚至只发个网上的链接让发问者参考，可能就完事了。还是不懂的话，再针对大流程和框架解说一下。反正基本原则是怎么都不轻易把答案直接告诉你。</p></li>
</ol>


<p>你们喜欢哪种？你们觉得我是哪种呢？</p>

<p>那位旧同事说，他现在觉得最后一种，才是最好的。这是因为<strong>授人以鱼不如授人以渔</strong>。如果教会你在某个公司，某个项目里，特定的某些做法，让你可以顺利地完成任务，可能只是一时受益。但是长远来说，如果养成依赖，靠别人指导，而不是自己分析解决问题，其实一点用处都没有。相反，如果能一步步启发思考，尽量让你自己解决问题，以后无论什么环境，都能很好适应。</p>

<p>其实我的风格是第三种 (别说我自夸啊，不信去问那个家伙) 。但是当初他刚毕业，我带他做项目时，他被我折磨地痛苦的要死。他和另一个人老是在琢磨该不该问我问题。看我脸色不太对劲的话，就不敢问了。回想起来，那时候，他不会我们系统的框架，不懂 Javascript，只想写 JAVA。而我不断逼他自己主要看JS代码，教他怎么猜测代码块的上下文，在不懂全部方法的情况下，猜测 Bug 可能在什么地方，怎么忽略代码细节，领略大意等。也是难为他了。</p>

<p>其实我相信我做的是对的，可是为什么他那时那么痛苦呢？</p>

<ol>
<li><p>语气问题
 有时候我的语气感觉比较凶和严，所以他会认为我不够耐心。其实用第三种风格的话，每次提醒的点是不多的，所以一旦语气不好，别人就会认为你没耐心，不想教。我的情况是，对女的态度好点，对聊得来或关系好的朋友说话会没那么多顾虑，对一些感觉学习态度有问题，或者自己不仔细思考的人我会没耐心。他是第二种。</p></li>
<li><p>解释是否通俗易懂<br/>
 他说他现在的一个同事，在向他解释一些他不懂的技术概念的时候，讲的很通俗易懂。而我，当时给他的感觉是解释的不够容易理解。除了上面的语气和耐心也有影响外，一个人要把事情解释到通俗易懂，他必须对要解释的事物有深刻了解，然后能从听众的角度，简化概念，尽量转换成比较容易理解的事物类比。这点我确实是做得不够好的。因为以前我的技术功底确实不深厚 (当然现在也还不行)，要能做到深入浅出确实不行。而且我有时没能从听众角度出发，也是造成难理解的原因。</p></li>
</ol>


<h2>人格魅力与影响力</h2>

<p>那天晚上，我们聊到了电影中国合伙人，俞敏洪，罗永浩，马云等。我那个同事说以前他以为新东方火的原因是上课幽默。其实后来想想应该不是，主要应该是俞敏洪乐于分享，而且难能可贵的是把自己失败的地方和人分享，把自己和听众拉到同一平面上，产生共鸣，另听众感同身受。不像一些只会宣传自己成功经验的人，虽然一时能让听众产生仰慕之情，但感觉高高在上，经验之谈也飘渺不切实际。</p>

<p>我至今碰到的，和尊敬的有非凡人格魅力的人或公司，都是肯无私分享自己实际经验，技能和想法，让别人觉得能从你身上学到东西的人或公司。一旦你身边围绕着一群向你学习的忠实听众，人格魅力和影响力就出来了。像马云，罗永浩还有现在 IT 领域各种大牛等，凭借他们无私的演讲，博客，对开源贡献等积累的忠实听众，为他们的公司，产品营销，创业起了多大的作用。在 <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745">Rework</a> 里面 <strong>Build an Audience</strong> 那节说的很好：</p>

<blockquote><p>the most fortunate companies have <em>audiences</em>.<br/>
&hellip;<br/>
When you build an audience, you don’t have to buy people’s attention—they give it to you. This is a
huge advantage. So build an audience. Speak, write, blog, tweet, make videos, whatever. Share
information that’s valuable and you’ll slowly but surely build a loyal audience. Then, when you need
to get the word out, the right people will already be listening.</p></blockquote>

<p>在此，我也要向之前无私教导我的人，Google 公司，令我获益的各位大牛和博客致敬，努力成为分享的一员。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造 Facebook 读后感]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/04/25/review-on-book-inside-the-facebook/"/>
    <updated>2013-04-25T06:10:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/04/25/review-on-book-inside-the-facebook</id>
    <content type="html"><![CDATA[<p>看完<em><a href="http://www.amazon.cn/gp/product/B0060E1LIK/ref=ox_ya_os_product">YouTube 创始人陈士俊自传</a></em>后，很快我又把<em><a href="http://www.amazon.cn/dp/B00ANI5YXW">打造 Facebook</a></em>看完了。但感觉这没上本书过＂瘾＂，我看得更快和粗略。</p>

<p>笔者王淮主要是为外部人士揭秘 Facebook  内部一些流程和机制，包括招聘，人员培养，团队合作，项目流程等。本书内容叙述直白，但略显平淡和笼统。揭秘的 Facebook 流程，其实也和其他一些关于敏捷，管理等文章提及的好的做法没太大差别。这其实也在意料之中，因为核心机密也没可能爆料，加上好的做法本来就那些，关键看怎么做，执行力如何和团队配合，而且最主要是配合不同公司文化，架构和流程作调整。</p>

<p>下面我只抽 Facebook 做得比多数公司好的其它关键说说。</p>

<h2>制胜关键</h2>

<h3>重视内部工具，平台搭建</h3>

<p>可能是和 Facebook 的工程师文化驱动文化也有关，Facebook 内部竟然还有专门的团队负责所有工程师要用的工具和平台的搭建，而且最重要的是这个团队还是被放在最高优先级和重要的位置上，而不是说把二流的人放在那。</p>

<p>这就应该和其他大多数公司很不同。很多公司都是把重心和一流人才放在产品上面，但却不知道这样一个打造工具和平台的团队，其实才是打造公司核心技术，和提高工程师生产率的重要基石。如果一个公司能为项目工程师提供一键搭建环境，和各种提高生产率以及沟通的工具，那这家公司的技术功底和自动化流程做得有多好啊。</p>

<h3>所有人以 Facebook 的整体利益为考虑出发点</h3>

<p>这可不是说那么容易的。特别是大公司，各个部门各自为政，以部门利益为出发点，在人员调配，项目进度安排上可以说是协调的噩梦。每每总要等待各个部门的老大的最顶层上司直接命令下来才能成事。想想中间要花费多少功夫。书中虽然没有提及细节，但好几处都提到和体现这个整体利益。无论在人员换组，项目人手调配，进度安排上，感觉他们都能比较好的处理好，这相当不容易。</p>

<p>作为一个曾经体验过部门之间要人和不放人，被不同 Manager 带过都被打上不同标签和不平等对待的人，真是气不打一处来。当时还是在家小公司啊。还有就是项目组之间如果有依赖，优先级和协调的重要性现在更是深有体会。</p>

<p>在 Facebook 里，整体利益的另一体现就是 Don&rsquo;t reinvent the wheel。  笔者提到的就是他们项目里的核心机器学习的组件，当初考虑到是放在自己支付安全组内还是放在 Anti-Spam 那边。因为那边已经有现成的框架，最后平衡考虑还是放在别组，然后协调和推进。可是很多公司，往往因为只顾部门利益，总想自己造些什么出来显露功绩。即使有现成的东西也不用，造成资源浪费。</p>

<h3>发挥工程师创意</h3>

<p>和 Google 的 20% 自由时间差不多，Facebook 也有内部的 Hackathon 来鼓励工程师做各种好玩的事情，甚至可以推迟项目时间。真是难得。</p>

<h2>八卦</h2>

<p>书里也提到了关于 Facebook 请公关公司炮制散布 Google 负面新闻的事情。Mark 在内部向所有员工说明并要求大家要支持 Marketing 部门，因为它们平常都在保护公司的利益。现在即使犯一点错，也应该得到体谅。</p>

<p>书里也提到 Mark 很在意公司保密的原则，一但有人出错，坚决处理。</p>

<p>这里隐含的意思就有点意思了。Mark 是一个很看重公司机密的人。他也很注意公司团结，员工应该一致向外。个人感觉这件事情上，Facebook 的 Marketing 应该不会在老板没出声的情况下，自己乱来吧？何况书中也说到 Mark 在关键问题的产品把控上是很严的。所以，小人之心猜测那也是 Mark 本人的意思。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我能否20个月赚130亿?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/04/16/can-i-make-13-billion-in-20-months/"/>
    <updated>2013-04-16T21:36:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/04/16/can-i-make-13-billion-in-20-months</id>
    <content type="html"><![CDATA[<p>你是否看到这个标题，想鄙视我而冲进来了？呵呵，我承认是有点标题党，所以我马上告诉你答案，不能。因为看完<a href="http://www.amazon.cn/gp/product/B0060E1LIK/ref=ox_ya_os_product">YouTube 创始人陈士俊自传</a>，我发现我不具备他，或者说硅谷人的特质，至少暂时。这就是他书里反复提到的，其实看书时也强烈感受到的，＂瘾＂。</p>

<p>这本书周五在亚马逊下单，周六下午收到，周日晚就看完了。是在带儿子的零星时间看完的。之所以可以看的那么快，除了我看得快，没太关注些八卦细节外，重要的是书写的流畅，活跃，富有激情。真的使我拿起来就不想放下。感觉他就像和我对话，讲故事一样。推荐看看，也可以找我借。</p>

<h2>瘾</h2>

<p>说回这本书，如果说他的成功是因为从他打小就对计算机感兴趣，和可能内在有天才工程师的基因有关，不如说是他深深的那种写代码和创造产品的瘾。他可以在一台没有硬盘的电脑上重敲一次程序展示给父母看他的成果，可以连续写代码20小时，可以放弃 Google 工作和奖金重新出来创业＂折腾＂。这就是在他们 Paypal 帮里共同存在的因子，硅谷人的因子，也是造就成功的因子。说来也巧，他也一度面临肿瘤这样的病痛，像乔帮主一样知道自己的＂瘾＂的存在，而为之奋斗。</p>

<p>我想，除了这个不为金钱的瘾外，没任何东西是能让他们这类人如此成功的。我能否培养或者挖掘这种瘾出来，然后不顾后果的去追寻呢？我觉得很难，因为我向来的性格是求稳，做事情会想很多方面，希望求最稳妥的方式，和他极其不同。就像他说的：</p>

<blockquote><p>在创业这件事上，我不希望＂退可守＂，我不想设定好退路，过于安稳的尝试性的投入岂非过于无聊？实际上，如果有一天我在一个寂静的森林里迷失，而前面又有两条路可以选择的话，我一定会在观望很久后放弃充满车辙的那一条，接下来选择杂草丛生的那条，因为我觉得，走可以预期结果的路，那样真的没意思。</p></blockquote>

<p>暂时我还做不了这点，但我隐约感觉内心有想做点事情，和创业的冲动，或许现在，我能做的是保持内心这么点冲动，和打磨自己的技术，并紧跟潮流。</p>

<h2>书里一些我比较同意的观点</h2>

<h3>公司架构和管理</h3>

<blockquote><p>PayPal 在招聘时就刻意寻找志同道合的＂自己人＂，因此让推行这种平等自由的文化变的容易起来。
&hellip;
他们在招聘于自己类似的人。</p></blockquote>

<p>其实我非常赞同这种找人的观点。虽然管理上有说法，招聘者不应该只找自己类型的人，应该在团队里有各种不同类型的人，用以互补之类的。但我觉得，互补的，主要应该是技术专业特长，但他们还是一些拥有核心共同特质的，一些相同的原则，比如说开放和接受改变挑战的心态，积极的勤奋的负责任的态度，团队合作妥协和支持的精神等。反而技术水平，专业领域不是第一考虑。当然，那些 Level A 的工程师，选人时当然尽量只选能力也是同样 Level 的同事，这可以理解。但是就像书里那个有点极端的例子，真的到了这种心态的顶峰了：面试听到说面试者喜欢打篮球的，就不要了，因为他印象中，那些打篮球的旧同学，没几个靠谱的。</p>

<p>就敏捷来说，我也觉得必须管理层和团队里每个人都有敏捷的心态才行。不一定都要是编程高手，但一定是内心要不断求变，求改进，对敏捷的核心思想的认可，而不是简单的流程的 follow。</p>

<blockquote><p>仅仅管理者自己做到尊重团队是不够的。公司管理架构的设置，有的时候，会从一开始就决定了管理和沟通的难度。</p>

<p>潘宇的总结：＂在创业公司，你是生产创意，而在稳定的大公司，你首先得在同事当中销售这些点子，得证明你的是最好的才行。＂</p></blockquote>

<p>在小公司待了近8年时间的我，可以说，真的是很不习惯大公司的沟通和效率。大公司按职能分各种团队，导致人员项目协调费时费力，出问题还很容易导致推卸责任而不是集体负责。这在书里的例子，即使是 eBay 这样的算是软件业巨头，也不能幸免。所以说，公司架构的设置，可能就已经决定问题的存在。不改变架构，是无法改变这种情况的。</p>

<p>书中提到的潘宇的总结，其实就是看你的主意到底要说服多少人，和哪些人。如果都是在创业公司里的自己人，事情就好办了。但如果是涉及大公司里不同部门，特别是不同利益团体，那就悲催了。所以在 Conway&rsquo;s law 有说:</p>

<blockquote><p>organizations which design systems &hellip; are constrained to produce designs which are copies of the communication structures of these organizations.</p></blockquote>

<p>在软件工程里，沟通占据绝大多数时间和比重。公司架构这种影响沟通的客观屏障，也就不可避免的影响了系统设计。</p>

<p>我心中的理想团队，就是那么几个志同道合的人，几个工程师，一两个设计人员，当中有一个核心的令人敬仰和最后拍板的头头，说做就做，同进退。</p>

<h3>创业</h3>

<blockquote><p>每一个创业的成功当然都免不了运气的成分，<br/>
&hellip;<br/>
也就是俗称的＂在正确的时间做正确的事＂。<br/>
&hellip;<br/>
创业者们得培养自己分析和理解技术趋势的眼光，要不然只能任运气溜走。</p>

<p>新闻每天都在发生。但对于敏感的创业者来说，这些事件，如果你搞清楚它们背后的联系，总会意味着某些意想不到的机会。</p>

<p>YouTube 和点评网站 Yelp 都从 Paypal 那里学到一个有价值的经验 &mdash;&mdash; 头一个想法往往不是最好的。</p>

<p>＂奥卡姆剃刀＂这个这个哲学原理崇尚＂如无必要，勿增实体＂，尽量简单有效。</p></blockquote>

<h3>人</h3>

<blockquote><p>在这个世界上，有的人就是擅长维持一个公司的运转，有的人则擅长不断创新突破，这两种选择本就无所谓对错，只是，要选择最适合你自己的。</p></blockquote>

<p>我还不知道自己属于哪种人。我算是有点典型工程师心态，对一些繁琐的流程和企业架构和事务感觉很没效率，不爽，也很不喜欢办公室政治等。维持公司运转要比这烦多了。作技术突破创新吧，技术底和那种专注技术难点的死劲还不够，创新能力也有待培养。再按感觉走走看，攻一下技术吧，这也算是硬通货。</p>

<h2>八卦</h2>

<ol>
<li>一个 Google 高管，跳槽去 Facebook 前，向他打探 YouTube 的战略。Facebook 还请公关公司炮制散布 Google 负面新闻。</li>
<li>他很短时间就娶了 Google 韩国第一美女。求婚过程还很有趣的。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share code between Node.js and browser]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/04/13/share-code-between-nodejs-and-browser/"/>
    <updated>2013-04-13T12:59:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/04/13/share-code-between-nodejs-and-browser</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>When you are writing a Node.js based web application, it comes to a demand to share code between Node.js and browser because both the frontend and backend are written in JavaScript.  Some utility APIs, such as validation, data processing, are the common cases.</p>

<p>The philosophy of organizing code in Node.js, current trend also, is modularization.  Each module file has its own execution context, requires its dependent APIs from other modules and publishes its own APIs out for other modules.</p>

<p>Hence, the code sharing between Node.js and browser requires the code to be used as the same way in browser.</p>

<h2>Situations and Solutions</h2>

<p>Things work differently regarding the JS and modules loading mechanism.  Because in browser, it works asynchronously while in Node.js it is synchronous.  In browser, we cannot directly do inline require like Node.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">xxx</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">b</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two kinds of situations:</p>

<h3>Modularization already realized for browser code</h3>

<p>If you have already modularized your JS code for browser and used some AMD / CMD script loader, such as <a href="http://requirejs.org/">RequireJS</a>, or <a href="http://seajs.org/">SeaJS</a>, you might expect your life would be easier.  However, this is not the case.</p>

<p>The require must be like below in order to make sure all dependent modules to be loaded successfully and then execute the code which uses them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;./b&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">xxx</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">a</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">b</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">bla</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bla&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that there is quite some syntax different between Node.js style and the AMD / CMD one in browser.</p>

<p>To overcome this incompatibility, there are two main approaches.</p>

<ul>
<li><p>Directly add boilerplate code in one side to fit the other</p>

<ol>
<li> Some sample manual boilerplate code and also more explanation can be found <a href="http://www.2ality.com/2011/11/module-gap.html">here</a>.</li>
<li> <a href="https://github.com/ajaxorg/node-amd-loader">node-amd-loader</a>: Add one extra line in Node.js module to load AMD style module.</li>
<li> The <a href="https://github.com/jrburke/amdefine">amdefine</a> for RequireJS: Special boilerplate code in Node.js module and then can be stripped out by <a href="https://github.com/jrburke/amdefine#optimizer">RequireJS Optimizer</a>.</li>
</ol>
</li>
<li><p>Build process to handle the boilerplate</p>

<ol>
<li> <a href="https://github.com/substack/node-browserify">browserify</a>: Recursively analyze all the <code>require()</code> calls in your app in order to build a bundle you can serve up to the browser in a single <code>&lt;script&gt;</code> tag.</li>
<li> <a href="https://github.com/medikoo/modules-webmake">modules-webmake</a>: Bundle CommonJS/Node.js modules for web browsers.</li>
<li> <a href="https://github.com/kenspirit/webassemble">webassemble</a>: Based on modules-webmake.  Auto bundle CommonJS/Node.js packages for web browsers.</li>
</ol>
</li>
</ul>


<p>Personally, I prefer introducing extra build process to handle the boilerplate for me.</p>

<p>The advantages of build process boilerplate are:</p>

<ol>
<li>Boilerplate code is brittle and subject to change.  Adding it to every file makes future change harder.  If some build process can automatically remove them, why not use the build process to automatically add them?</li>
<li>Modularization is good but for production environment in browser, it is always better to minimize network request to load JS file.  Most of the time, module files are bundled into single package for one call.  If build process need to be introduced to handle it, it would be great to integrate sharing logic into it also.</li>
<li>If the boilerplate is introduced in build process, it is better to discover potential error during development cycle instead of last minute preproduction testing.</li>
</ol>


<p>You may have concern on effectiveness during development cycle.  However, if you can make good use of a good IDE, say <a href="http://www.sublimetext.com/">Sublime Text</a> and some task runner, say <a href="http://gruntjs.com/">Grunt</a>, it&rsquo;s just a couple of seconds&#8217; waiting after a hotkey command after saving your JS file in IDE.  It might just be the time you switch from IDE to browser and press F5.</p>

<h3>Legacy or namespace browser code style</h3>

<p>Although it&rsquo;s seldom the case that when you are using such hot tech of Node.js but still need to stick to the old style in browser, it&rsquo;s actually easier to share your Node.js code under this circumstance.</p>

<p>The webmake and webassemble mentioned above is easy to bundle your modules under global or a particular namespace.</p>

<p>So, what is my favorite choice?  Write the Node.js style code and share them to browser by webassemble.  Why not webmake?  Because the webassemble is made by me. :P</p>

<p>So tell me what is yours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读 Lean Startup 和观电影 Lincoln，电影 The VOW 后感]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/02/13/review-on-book-lean-startup-and-movie-lincoln-and-the-vow/"/>
    <updated>2013-02-13T21:40:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/02/13/review-on-book-lean-startup-and-movie-lincoln-and-the-vow</id>
    <content type="html"><![CDATA[<p>这篇 Blog 内容有点杂，是因为这是过年期间做的主要几件事情，几篇 Blog 又太多，况且只是那么些胡思乱想，加上里面确实有些相通的地方，所以还是合体吧。</p>

<h2><a href="http://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation/dp/0307887898">Lean Startup</a></h2>

<p>这本书我总体来说看的比较粗略，主要因为前面的章节在目前身处非创业型企业文化下不太容易适用得上，所以目的只是大概了解作者思想。后面的 <em>Part Three ACCELERATE</em> 部分倒是有些是可以相对容易地应用在成熟，或者说已经某程度上固化并寻求改变的企业上。我说的是不太容易和相对容易，因为任何改变，重则涉及文化，轻亦涉及利益，都是难事。那如何建立一个 Adaptive 的企业环境呢？</p>

<h3>突破点</h3>

<p>Five Whys 是在第11章 <em>Adapt</em> 里提到的一个很好的方法。其实就是中国人说的打破砂盆问到底。看来还是古人智慧无穷啊。这个 Five Whys 除了带来它显而易见的好处，也就是了解到事件的根源之外，其实还可以让一个企业或团队控制解决问题的程度和节奏。问五次，不至于太少而了解不到真相，也不至于太多，而浪费过多精力。</p>

<p>我们很常在开发或团队建设中碰到不少问题，比如说每次代码改动后要浪费很长时间部署，某某人改动代码后部署不成功了，新人不了解系统框架，部分人写代码很不好读等。很多人听到这些问题都会抛出一个大而全的答案，机器慢，没 CI 环境，没培训，没标准等。这种答案因为太笼统和没有边际，导致解决方案看起来需要大量人力物力去解决问题，后来不了了之，说了白说。</p>

<p>所以，Five Whys 的实施要求是 <strong>Be Small，Be Specific</strong>。</p>

<p>比如前面说代码改动后部署慢，原因可能是要重新编译打包和 Web 容器启动慢。那为什么要重新编译打包，可能是因为某些系统服务编译和打包的脚本绑定在一起。那可不可以把它们分开？如何分开？能否借助工具做 Hot Deploy？那为什么容器启动慢？能否不用 EAR 来部署，减少解压缩时间？能否换用轻量级容器？能否禁用不必要插件？ 这些其实就是一些细小而精确的建议和想法。再比如书本举出的很常见的例子，就是培训。多少的培训才足够，覆盖范围要多广？还是说，在碰到问题后，才写出对应的 Guideline 来避免错误再次发生？这样的 Incremental 式的累积，会否更省时间，更有效针对问题？</p>

<p>其实 Be Small，Be Specific 还有另一个好处就是避免由 Five Whys 而产生出 Five Blames。把问题精确化，细化，可以尽量避免问题扩大化，责任推诿，相互指责，无法确定责任人，最后无法解决。</p>

<h3>实施细节</h3>

<p>另两条原则呢，可以引用原话来说：</p>

<blockquote><ol>
<li>Be tolerant of all mistakes the first time.</li>
<li>Never allow the same mistake to be make twice.</li>
</ol>
</blockquote>

<p>还有一些比如说，不要带上历史包袱，把历史遗留问题等到重新出现时再解决；讨论问题原因和解决方案时，一定要所有牵扯到的人员在场，无论位处任何部门，级别等都是需要注意的事项，推荐各位去细看。</p>

<h3>后台要硬</h3>

<p>这里可能说的有点黑，但其实中国人很能理解它的含义。因为要想做事，首先必须得到领导支持。要有开明的文化和环境，必须要有开明的领导。所以，充分让领导认识到 Five Whys 的好处，实施的原则，可能带来的后果和对团队文化的冲突，并取得全力支持，才能确保有效执行。</p>

<h2><a href="http://www.imdb.com/title/tt0443272/">电影 Lincoln</a></h2>

<p>Lincoln 每次说话，要么风趣睿智，要么充满激情。那一字一顿，不紧不慢而又坚定的语气，让我感受到这位历史伟人，对解放奴隶制的理想是多么执着。从以下欧几里德定理都可以看到人人生而平等，真是可贵，或者还是只能说他对此执着到何等程度。</p>

<blockquote><p>It is a self evident truth that things which are equal to the same thing are equal to each other.</p></blockquote>

<p>电影里也描述了他作为一位父亲和丈夫的一面，那些为国而牺牲家庭对他带来的愧疚。总体来说，这是一部不错的电影，让我看到当中的一些人性转变，慷慨激昂，推荐大家看看。</p>

<h3>懂得如何前行</h3>

<p>电影里的一段他对 Mr. Steven 说的话，我觉得深有感触。听写可能有差别，但大意应该没错：</p>

<blockquote><p>A compass, I learnt when I was surfing in hill, will point you to the true north where you are standing, but it has got no advice about the swamps, deserts, chasms, along the way.  You can pursuit to go the destination, you plunge your head ahead, heedlessly of the obstacles, achieving nothing more than sinking in the swamp?  What is the use of knowing the true north?</p></blockquote>

<p>其实这里说的道理就是，即使你知道真理和正确的方向，如果因为鲁莽地直行，被途中困难所牵绊而无法到达目的地，那手握真理意义何在？</p>

<p>正如去年我的目标是 Drive the Change，如果说我只顾四处宣扬，不顾各方抵触，而不是实在的迂回实施，那意义何在？ 所以说，求变，也要懂得如何带领别人跟随而变。自己独变，往往成为异类，无法生存。带领众变，才能成为改变历史的潮流。</p>

<h2><a href="http://www.imdb.com/title/tt1606389">电影 The VOW</a></h2>

<p>这可能算是老套的爱情桥段电影了。女主角撞车失忆，她丈夫尽一切办法想她恢复，但都无能为力。放手离开后，女主角重过生活，发现后来，还是沿旧轨迹，邂逅男主角，重续前缘。</p>

<p>老婆看的纸巾浪费无数，我也被男主角的无私的爱而折服。情爱的观点基本共通，我也就不说了。此外的感悟是，一个人，即使让你重新走一次走过的路，可能你还是会沿旧有的轨迹再走一次。你就是你，无论何时何刻，那一刻的反应，那一刻的抉择，都是你内心的反映。所以，不必后悔说，如果回到某时某刻，可能你就不会那样做了。也不用对一些事情犹豫不决，不知道做了学了，对日后是否有益处。要做的，还是跟随自己的心，在当前时刻，做一个自己的决定，走自己的路。最终回首，一些看不起眼的决定，都是为你的 Destiny 而铺设的。正如乔帮主的名言，过去不起眼的点，在最后都会连成线，成就你自己。</p>

<blockquote><p>Again, you can&rsquo;t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something &ndash; your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p></blockquote>

<p>所以说，自己认为该做的就去做，该放手时，还是应该放手。是你的，总会回来。不是你的，放手后，可能你的才会来。谋事在人，成事在天。Make things happen，but don&rsquo;t force things happen。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 Retrospect and 2013 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/02/05/2012-retrospect-and-2013-goal-setting/"/>
    <updated>2013-02-05T22:37:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/02/05/2012-retrospect-and-2013-goal-setting</id>
    <content type="html"><![CDATA[<p>现在写年终总结和新年展望似乎有点晚。其实我是习惯按农历年附近划分的，呵呵。开玩笑，因为前段时间忙前面两篇Blog，并且去年比较大的转折事件也算是农历年后开始，那就歪打正着吧。</p>

<h2>翻墙</h2>

<p>比较大的事件就是这个。难的换工作后有机会肉体翻墙，去拜访了万恶的资本主义老大 &ndash; 美国，还真见识了一把。蔚蓝的天空，PM2.5超低的空气，见人即停的车，真让人羡慕嫉妒恨，更加强了我内心深处的出国欲望。可惜家庭的顾虑和牵挂已经无法轻易撇去，只能留它作为追寻的梦想，不断激励自身奋斗，以应付未来这个诡异的国度的各种变化。</p>

<h2>工作</h2>

<p>本来换工作主要目的就是转攻前端，可是计划赶不上变化，翻墙的代价就是去熟悉后台相应开发技术。所以，过去一年，在部门里还主要是负责 JAVA 开发。编码和设计功底变化不大，只是要适应新框架和在框架的限制内做最有效的挣扎。本是小角色一名，只需专心写代码。后来人士变动，变成 Sub-group lead，发现开会时间暴增，写代码时间变少，碎片化。无效率的开会真是万恶之源。</p>

<p>去年技术方面成长速度并不太理想。要熟悉新框架，新业务，新团队，和新项目起步各种混乱，还有各种会议，让我各方面耗费不少时间。思考和学习如何敏捷，如何不断寻找可改进领域，有效推进事情而尽可能少侵犯既有利益团体可以说是对技术成长缓慢的补偿。要在大公司里推进一些事情，真是比小团队难多了。只能从自身，从小，从内部做起。</p>

<p>明年听说有点变动。老板理想很美好，关键看流程和各部门如何相应变革协调，而这正是当前主要问题所在。碰到转变的契机可不容易，无论是好是坏，都可学习到东西。我就拭目以待，并尽全力推进，看事态如何发展再说吧。</p>

<p>个人方面，明年希望做事可以更有效率，看能否借助自己正在做的 Pet Project 来帮助管理和理清自己的时间花在什么地方和更好的榨取之。在技术和团队上，已经基本和 Team Lead 沟通过，未来可能主要负责注重项目整体技术和设计，希望推动引入防打扰时间，Code Review，CI 持续集成等。</p>

<h2>看书，学习</h2>

<p>一直以来，都尽量找时间用 Kindle 看书。只是突然从看盗版PDF，变成乐意去购买原版。虽然花了我不少银子，可是心里舒坦。也觉得作为知识工作者，应该尊重其他人的劳动成果。回头如果未来自己有什么产出，同样希望得到回报。去年一下买了不少书，主要因为之前两三年从老婆怀孕到照顾儿子期间，学习少了，积累不少书债。加之不少好书涌出和推荐，一下忍不了手。下面是主要书单：</p>

<p><strong>技术类</strong></p>

<ul>
<li>Functional Programming for the Object-Oriented Programmer by Brian Marick</li>
<li>NOSQL Distilled by Pramod J. Sadalage, Martin Fowler</li>
<li>Patterns of Enterprise Application Development by Martin Fowler</li>
<li>Domain-Driven Design by Eric Evans</li>
<li>The Art of UNIX Programming by Eric S. Raymond</li>
<li><em>Async JavaScript by Trevor Burnham</em></li>
<li><em>JavaScript: The Good Parts by Douglas Crockford</em></li>
<li><em>Stylin&#8217; with CSS by Charles Wyke-Smith</em></li>
</ul>


<p><strong>非技术类</strong></p>

<ul>
<li>The Lean Startup by Eric Ries</li>
<li>The Pragmatic Programmer by Andrew Hunt, David Thomas</li>
<li>Mythical Man-Month by Frederick P. Brooks</li>
<li><em>Kanban by David J. Anderson</em></li>
<li><em>More Joel on Software by Joel Spolsky</em></li>
<li><em>Getting Real by Jason Fried</em></li>
<li><em>Rework by Jason Fried</em></li>
<li><em>Driving Technical Change by Terrence Ryan</em></li>
<li><em>Hackers and Painters by Paul Graham</em></li>
</ul>


<p><em>注：斜体的已经看了</em></p>

<p>个人感觉书看的有点快，多少有点囫囵吞枣的感觉。可能是书债太多，怕看少了跟不上时代了，呵呵。其实还有一部分想法是，首先初读，让大脑先接触多领域的思想和知识，然后再精读，反复读，并且在实践中结合，才能吸收和强化理解。无论是技术类或非技术类的方法论书籍，不尝试去自己写代码，不实践方法，是无法体会的。第一遍，要大概了解里面主要讲到什么点和最感触的是什么，以便日常工作学习实践。然后再精读来慢慢巩固吸收。好书，读三遍也不为过。</p>

<p>之前看的是非技术类书多点，因为利用零散的时间来看书的话，看技术类的，不容易入脑。这个月再争取看完 The Lean Startup 和 Mythical Man-Month，然后集中精力看剩下的技术类书。日后为了巩固知识和真正理解，看完一本书必须写写心得和书评。</p>

<p>技术方面的学习，只要还是集中在前端，Javascript 和 Functional Programming 方面。目前主要是利用 Pet Project 来摆弄一下 AngularJS，MongoDB 和 NodeJS。</p>

<h2>时间安排</h2>

<p>学习时间：<br/>
零散时间基本就只有平时上下班车里的30分钟，还有其它一切可能的坐车时间。这些时间都是用来看书，写 Blog，或者看看 Google Reader，微博。连续的时间最多只在早上。由于家人比较早睡觉，大概9:30-10:00就休息了，所以我也只能早睡早起以避免打扰。早上4:30-5:00期间起床，洗漱15分钟，到6:45分基本有1.5小时，周末的话，家人比较晚起，可以有2小时。这段时间主要先用30分钟左右看看微博，或者书。再写写代码。最后还有周末午休时间，大概3小时，也主要用来写代码或者Blog。</p>

<p>家庭时间：<br/>
其实就是在我工作和学习之外的几乎所有时间支出了。或者应该说是在工作和家庭时间之外的所有时间，我再榨取出我的学习时间。优先级来说，还是以家庭优先。这里主要用在陪伴儿子上面。每晚陪他玩一玩，下下棋，周末出去逛逛，接触一下户外，基本就这样过了。还没什么特定模式和游戏来开发他的智力潜能什么的。这个老爸还是有点懒，明年看看有什么可以改进的。为人父母真的不容易，压力山大啊。</p>

<p>锻炼时间：<br/>
每天早上固定15分钟左右，跳绳，哑铃，俯卧撑，仰卧起坐等。不过最近运动减少，因为前段时间儿子生病没有上幼儿园，老妈腰也不舒服，所以要帮忙做饭买菜什么的，再加上有时自己在学习时又放不下手，就忽略了点。明年还是得加强一下，学习也不差那15分钟了。</p>

<h2>善事</h2>

<p>公益组织方面，现在是月捐150元给世界儿童组织，因为好像已经没有什么公益组织可以信得过了。壹基金之前也通过招行信用卡月捐了一年。后来因为卡太多而取消了，明年看要不要其它途径重启一下。个人方面，之前看到一个江门的人，老婆有血液病，艰难的生了个健康的小孩出来。但是他老婆的病还没钱做手术，拖延着治疗着。详情可以看<a href="http://t.cn/zjBs02D">江门日报</a>和她老婆的<a href="http://weibo.com/u/2785731123">微博</a>。 连续几个月捐了些吧，只是一个人也撑不了太长时间，就也帮她在微博宣传一下。谁有心的，也可以帮助一下。</p>

<p>我的帮助原则是，个人优于组织。已经在微博上被很多大人物推广出来的，我就不捐了，因为他们已经得到很多关注。困难的是一些没有办法得到别人更多关注的普通人，特别是没什么文化的。我关注的对象主要是一些父母或者小朋友。毕竟为人父亲，懂得家庭责任和有困难的痛处。</p>

<p>其实实际意义上来说，我做的也并不算什么善事。可能还只是伪善，出了点钱，安慰一下自己。本来也想像 Ailsa 她们那样去探访一些需要帮助的人，只是还是私心重些，希望陪家人多点。像她那样初为人母，还这样不遗余力，才是真善。我那个相形见绌。等儿子在老家放假时再参于一下吧。其实我本来是有计划想等儿子长大点，找个家附近或者珠海的需要帮助的人，除了捐钱外，还可以时不时带儿子去探望一下，也可以教育他，让他懂得怜爱和帮助别人。明年再看看这想法能不能实施。</p>

<h2>总结</h2>

<p>工作还凑合，总体得到肯定。有些想法，因为有家在身，顾虑太多，已经不容易实施。我是一个顾家的人，那些舍家人而出去闯的事，不是不想，只是做不出来。不过，也不甘虚度日子，不断努力学习技术是王道，也为日后万一所需。为实践10000小时原则，还需要下不少功夫。看书还需要继续，但是要更专注和深入理解别人的思想以融为已用。在做的 Pet Project 5月前要做出来。当然还是要继续写 Blog 来做分享和总结。总体来说，没什么大成就。对自己而言，也算是已经尽最大努力平衡家庭，工作和学习。</p>

<p>最后祝支持我的家人和朋友们新年如意，身体健康。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expression in AngularJS must be idempotent and for multiple calls]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls/"/>
    <updated>2013-02-02T14:32:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls</id>
    <content type="html"><![CDATA[<p>Recently, I encounter two very interesting issues when using ng-repeat in <a href="http://angularjs.org">AngularJS</a>.  Not completely understanding the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> and <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> is the root cause.</p>

<h2>Requirement</h2>

<p>I am making some workout entries as a list and one special requirement is to group the records by the date.</p>

<p>In order to break the entries to different groups, I use a scope level variable <em>$scope.lastActionDate</em> to keep track of the last actionDate of the entry to decide whether I should add the actionDateGroup DIV.  The source is as below.  The debug messages are used to explain the issues I encountered.  You can safely ignore them now.  Actually, you may already guess what one of the issues is after seeing them.  Yes, only one.  I bet you can never guess the second one and why.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>        <span class="nt">body</span> <span class="p">{</span><span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;Lucida Grande&#39;</span><span class="o">,</span> <span class="s1">&#39;Lucida Sans&#39;</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;}</span>
</span><span class='line'>        <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span><span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;}</span>
</span><span class='line'>        <span class="nc">.actionDateGroup</span> <span class="p">{</span><span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;EntryCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;entries&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;entry in entries&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;div</span> <span class="na">ng-switch</span> <span class="na">on=</span><span class="s">&quot;isNewDateGroup(entry.actionDate)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;div</span> <span class="na">ng-switch-when=</span><span class="s">&quot;true&quot;</span> <span class="na">class=</span><span class="s">&quot;actionDateGroup&quot;</span><span class="nt">&gt;</span>{{entry.actionDate}}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;span&gt;</span>{{entry.desc}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;./js/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">EntryCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">entries</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>                <span class="nx">desc</span><span class="o">:</span> <span class="s1">&#39;Rope jumping count 1000&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">actionDate</span><span class="o">:</span> <span class="s1">&#39;2012-01-31&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">},{</span>
</span><span class='line'>                <span class="nx">desc</span><span class="o">:</span> <span class="s1">&#39;Jogging 3000M&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">actionDate</span><span class="o">:</span> <span class="s1">&#39;2012-01-31&#39;</span>
</span><span class='line'>            <span class="p">},{</span>
</span><span class='line'>                <span class="nx">desc</span><span class="o">:</span> <span class="s1">&#39;Situp 40 * 3&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">actionDate</span><span class="o">:</span> <span class="s1">&#39;2012-01-30&#39;</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">calledCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">isNewDateGroup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">actionDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$scope</span><span class="p">.</span><span class="nx">calledCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Function called count: &#39;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">calledCount</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Entry date vs Scope date: &#39;</span> <span class="o">+</span> <span class="nx">actionDate</span> <span class="o">+</span> <span class="s1">&#39; vs &#39;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">!==</span> <span class="nx">actionDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">=</span> <span class="nx">actionDate</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Expectation</h2>

<ol>
<li><em>actionDate</em> of the first entry will always be shown as it&rsquo;s the first group.</li>
<li><em>actionDate</em> of the remaining entries will be shown if its value is not the same as the previous one.</li>
</ol>


<h2>Phenomenon</h2>

<p>When the sample data is as above (case #1), the effect looks like it&rsquo;s behaving correctly as below:</p>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-30</div>
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>However, if you change the <em>actionDate</em> of the last entry to be also <strong>2012-01-31</strong> (case #2), you will find the result is that no date group is shown.  Why?  Isn&rsquo;t it supposed to show only the first one as all entries have the same <em>actionDate</em>?</p>

<h4>Expected result:</h4>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<h4>Actual result:</h4>

<ul>
    <li style="list-style-type: none;">
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>Now if you check the calledCount in the debug message, you will find that it&rsquo;s called 6 times (double the entry count) in case #1 and 9 times in case #2.  There are two issues I never thought they should happen:</p>

<ol>
<li>The <em>isNewDateGroup</em> function is called more than the entries&#8217; count.  (Guess this, right?)</li>
<li>The called count is different when the data is different.  (how about this?)</li>
</ol>


<h2>Causes</h2>

<p>In AngularJS <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> API:</p>

<blockquote><ul>
<li>Since <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> reruns when it detects changes the watchExpression can execute multiple times per <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> and should be <strong>idempotent</strong>.</li>
<li>The listener is called only when the value from the current watchExpression and the previous call to watchExpression are not equal <strong>(with the exception of the initial run, see below)</strong> &hellip;</li>
<li>The watch listener may change the model, which may trigger other listeners to fire. This is achieved by <strong>rerunning the watchers until no changes are detected</strong>. The rerun iteration limit is 10 to prevent an infinite loop deadlock.
&hellip;
(Since watchExpression can execute multiple times per $digest cycle when a change is detected, be prepared for multiple calls to your listener.)</li>
</ul>
</blockquote>

<h3>Issue #1</h3>

<p>The <em>isNewDateGroup</em> being watched whose calculation relies on value of <em>lastActionDate</em> is not idempotent and so during initial run stage, <em>lastActionDate</em> is set to 2012-01-30 at the end of case #1 which causes the illusion of working, while it is set to 2012-01-31 at the end of case #2 which illustrates the error.</p>

<h3>Issue #2</h3>

<p>In below code, if I comment out <strong>$scope.lastActionDate = actionDate;</strong> or change the <strong>return true;</strong> to <strong>return false;</strong>, the called count will be 6, same as case #1.  This implies that the return value of the expression is the cause.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">!==</span> <span class="nx">actionDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastActionDate</span> <span class="o">=</span> <span class="nx">actionDate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember what the API states: <strong>rerunning the watchers until no changes are detected</strong>?  Let&rsquo;s see what the return value is for watch expression <em>isNewDateGroup</em> after each run.</p>

<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-30</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true (&#8216;2012-01-31&#8217; !== &#8216;2012-01-30&#8217;;<br/>
        $scope.lastActionDate = &#8216;2012-01-30&#8217;)
        </td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate !== &#8216;2012-01-31&#8217;)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true</td>
    </tr>
</table>
</p>


<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-31</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">false (change compared to last run)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">3rd</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
</table>
</p>


<p>So now you see why changing the last entry to 2012-01-31 causes the 3rd time to evaluate the expression again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String interpolation should not be used with Class Directive in AngularJS]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/01/30/string-interpolation-should-not-be-used-with-class-directive-in-angularjs/"/>
    <updated>2013-01-30T07:02:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/01/30/string-interpolation-should-not-be-used-with-class-directive-in-angularjs</id>
    <content type="html"><![CDATA[<p>Do you see any issue in below HTML snippet with <a href="http://angularjs.org">AngularJS</a> code?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">ng-class=</span><span class="s">&quot;task-{{task.type}}&quot;</span><span class="nt">&gt;</span>{{task.type}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;task.type&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you see what is the difference between the one below and above?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">ng-class=</span><span class="s">&quot;&#39;task-&#39; + task.type&quot;</span><span class="nt">&gt;</span>{{task.type}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;task.type&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first one use String interpolation in Class <a href="http://docs.angularjs.org/guide/directive">Directive</a>.  The result is that the css class you expect to got based on model value <em>task.type</em> will not be applied to the <em>span</em> element. It took me a long time to figure out why.</p>

<p>Before furher reading, it&rsquo;s better if you have read the Developer Guide, <a href="http://docs.angularjs.org/guide/directive">Directive</a> section which explains the concept of <strong>String interpolation</strong> and <strong>Compilation process, and directive matching</strong>, although honestly, it doesn&rsquo;t quite clearly say how the String interpolation should or can be used.  Before, I just have the rough idea that it can be evaluated and replaced in String and also reflect the change from model.</p>

<p>If you use the first code snippet to create sample AngularJS page and bind an <em>task</em> model to it, you can see that the String Interpolation &ldquo;<em>works</em>&rdquo;: the ng-class attribute and the content of the span tag can be replaced correctly with model value.  Even if you change the model value through the input field, they can be updated accordingly.  However, the CSS is not applied as expected.</p>

<p>Why?  Let&rsquo;s take a look at AngularJS source:</p>

<p>In function <em>collectDirectives</em>, when it checks the element&rsquo;s attribute, it calls <em>addAttrInterpolateDirective</em> before <em>addDirective</em>.  In <em>addAttrInterpolateDirective</em>, the <a href="http://docs.angularjs.org/guide/expression">Expression</a> in String interpolation will be converted to a new directive with compile function to watch the change and set new value to the attribute which is the class directive in this case.  There are two important things need to be aware of:</p>

<ol>
<li>A new directive is ad-hoc created before the class directive it&rsquo;s inspecting.</li>
<li>The new directive&rsquo;s linking function is watching the expression change to update the class directive value itself.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">collectDirectives</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">directives</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">maxPriority</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">nodeType</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">attrsMap</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">$attr</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">match</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">className</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">nodeType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="cm">/* Element */</span>
</span><span class='line'>      <span class="c1">// use the node name: &lt;directive&gt;</span>
</span><span class='line'>      <span class="nx">addDirective</span><span class="p">(</span><span class="nx">directives</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">directiveNormalize</span><span class="p">(</span><span class="nx">nodeName_</span><span class="p">(</span><span class="nx">node</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">()),</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span> <span class="nx">maxPriority</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// iterate over the attributes</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">nName</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">nAttrs</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">jj</span> <span class="o">=</span> <span class="nx">nAttrs</span> <span class="o">&amp;&amp;</span> <span class="nx">nAttrs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">jj</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">attr</span> <span class="o">=</span> <span class="nx">nAttrs</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">specified</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">name</span> <span class="o">=</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">nName</span> <span class="o">=</span> <span class="nx">directiveNormalize</span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>          <span class="nx">addAttrInterpolateDirective</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">directives</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">nName</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">addDirective</span><span class="p">(</span><span class="nx">directives</span><span class="p">,</span> <span class="nx">nName</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="nx">maxPriority</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">addAttrInterpolateDirective</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">directives</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">interpolateFn</span> <span class="o">=</span> <span class="nx">$interpolate</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// no interpolation found -&gt; ignore</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">interpolateFn</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">directives</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">priority</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="nx">valueFn</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">$$observers</span> <span class="o">=</span> <span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">$$observers</span> <span class="o">||</span> <span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">$$observers</span> <span class="o">=</span> <span class="p">{}));</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="nx">attr</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="nx">$$observers</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">$$observers</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[])).</span><span class="nx">$$inter</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">$$observers</span> <span class="o">&amp;&amp;</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">$$observers</span><span class="p">[</span><span class="nx">name</span><span class="p">].</span><span class="nx">$$scope</span> <span class="o">||</span> <span class="nx">scope</span><span class="p">).</span>
</span><span class='line'>        <span class="nx">$watch</span><span class="p">(</span><span class="nx">interpolateFn</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">attr</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see how class directive works now.  It&rsquo;s at function <em>classDirective</em>.  If you put an expression in class directive, it will watch that.  Once there is any value change, it adds/removes class from element.  Hence, the second example above works correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">classDirective</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;ngClass&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ngDirective</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="nx">attr</span><span class="p">[</span><span class="nx">name</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">selector</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">||</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">$index</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">oldVal</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">newVal</span> <span class="o">!==</span> <span class="nx">oldVal</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">oldVal</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">oldVal</span><span class="p">))</span>
</span><span class='line'>             <span class="nx">oldVal</span> <span class="o">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">oldVal</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="k">return</span> <span class="nx">k</span> <span class="p">});</span>
</span><span class='line'>           <span class="nx">element</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">oldVal</span><span class="p">)</span> <span class="o">?</span> <span class="nx">oldVal</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">oldVal</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">newVal</span><span class="p">))</span>
</span><span class='line'>            <span class="nx">newVal</span> <span class="o">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">newVal</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="k">return</span> <span class="nx">k</span> <span class="p">});</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="o">?</span> <span class="nx">newVal</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">newVal</span><span class="p">);</span>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, if you put String interpolation into it, it will be watching <strong>undefined</strong>.  Why?  Remember what <em>addAttrInterpolateDirective</em> does?  An extra directive is added before this class directive and so its linking function runs before the one for class directive.  And one more thing I omit above: its linking function explicitly sets <strong>attr[name] = undefined;</strong>.  Hence, when the linking functions run sequentially, the class directive&rsquo;s linking function doesn&rsquo;t watch the expression in String interpolation or the value derived although the String interpolation itself works correctly to set the value to class directive.</p>

<p>Hence, in order to set CSS class on HTML element dynamically, we should either use:</p>

<ul>
<li>ng-class / ng-class-odd / ng-class-even without String interpolation by directly using model value or Expression.</li>
</ul>


<p>or</p>

<ul>
<li>HTML class attribute directly with String interpolation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[被广泛误解的匈牙利命名法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/01/03/widely-misunderstood-naming-convention-the-hungarian/"/>
    <updated>2013-01-03T21:03:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/01/03/widely-misunderstood-naming-convention-the-hungarian</id>
    <content type="html"><![CDATA[<p>我承认我是其中的一员。要向发明者 <em>Charles Simonyi</em> 道个歉。</p>

<p><strong>长期以来，不问出处，不求起源，只是单纯接受一些看起来是常识或事实的结论，导致此问题发生</strong>。这是我有的一点不足，要改进。多思考，多看书是良方，庆幸在不断服药中。如果不是看到 <a href="http://www.amazon.com/More-Joel-Software-Occasionally-Developers/dp/1430209879">More Joel On Software</a>（<a href="http://book.douban.com/subject/4163938/">软件随想录</a>）里 <em>I&rsquo;m Hungary</em> 那一节，我会继续误解下去。扯远了，回归。</p>

<p>估计可能 <em>90%</em> 的人都只是知道<strong><a href="http://en.wikipedia.org/wiki/Hungarian_notation">匈牙利命名法</a></strong>要求在变量名前面加上类别。这里用类别，而不是 type，也正是书里所说的，这个关键点就是使得不少人误解和背弃这种用法的原因。</p>

<p>多数人的用法是加上变量所代表的<strong>数据类型</strong>或<strong>作用域</strong>，如：</p>

<ul>
<li><em>n</em> 表示 <em>number</em> 型</li>
<li><em>s</em> 表示 <em>string</em> 型</li>
<li><em>g</em> 表示全局变量</li>
</ul>


<p>这种用法，在弱类型语言或者使用之前一些并不完善的 IDE 时，用处还是明显的。可以避免把数据赋值到不同类型的变量中而产生错误，或者养成不好的编程习惯。但是，其实更深层的意思应该是在书中提到的:</p>

<blockquote><p>Make wrong code look wrong</p></blockquote>

<p>这是什么意思呢？就是<strong>让错误的代码更容易暴露出来</strong>。一些不符合命名规范或非约定俗成的变量的使用，或者不恰当的方法调用，应该使得它们只要我们的眼睛一扫过，就可以判断出来。而这个基本原则，正是匈牙利命名法真正的用意所在。</p>

<p>在书中提到的关于用前缀来区别一些字符串是用户输入(Unsafe)的，还是已经处理过的(Safe)的例子，就很好的说明了这种意图。在当前很多大型的企业级系统里面，数据交换在用户，数据库，和不同子系统之间的交换需求是那么多且复杂，判断数据是否已经恰当处理就显得很重要。什么是用户提供的原始数据，什么是从数据库中拿出来的数据，有没有经过HTML编码，XML编码等。这些如果处理不好，就会产生一些隐藏很深的Bug。</p>

<p>还有一个适合这个应用场景的例子，我想就是时间数据的存储。在一些供跨国企业或用户协作的系统里面，时间数据的存储和显示，往往伴随着 TimeZone 的处理。一般来说，时间数据都是把 ISO 时间，也就是不包含时区的时间，存储到数据库里面，当需要显示的时候，再根据用户的时区来转换处理。当然，也有一些系统在业务上的需求是把已经考虑了时区的时间存储在数据库的。这样的话，什么时间是包含了时区信息的，什么时间是没有包含的，也是关键点。加上恰当的命名前缀，再结合业务需求，很容易就可以判断代码处理的对不对了，而不需要再翻看一系列的代码。</p>

<p>当然，你可以说，我可以把变量名写的很详尽，如 <em>unsafeContent</em> 而不是 <em>usContent</em>。 这是可以的。只是这样就使得我们的手和眼睛需要处理更多的字符，而且也混合了变量名中的类别意义和业务意义两部分在一起。个人感觉还是分开好点。</p>

<p>回想起来，很多对 <em>Code Convention</em> 上的要求，除了让程序员可以更容易理解代码以外，另一层意思也是更容易发现错误或问题所在，比如：</p>

<ul>
<li>简短的方法体</li>
<li>有意义的变量和方法名称</li>
<li><em>Self-Documentary Code</em> 或者是加注释</li>
<li>恰当缩进和使用括号{}</li>
</ul>


<p>所以说，我们也不应该一棍打死匈牙利命名法。有需要的话，只要整个团队一致认为某些情况确实可以增加代码清晰度和容易看出问题，那么定义清楚什么时候该用就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么开始写技术博客, 并且还是用英语?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/01/01/why-i-start-blogging-and-in-english/"/>
    <updated>2013-01-01T22:00:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/01/01/why-i-start-blogging-and-in-english</id>
    <content type="html"><![CDATA[<p>一些朋友发现我最近在写一些博客，而且还多数是英语的，都在好奇我在搞什么。那我就写一篇博客来解释一下吧。</p>

<p>写技术博客好处很多，很多牛人也提到过, 这是我出来刚工作时的一位同事的<a href="http://www.iamhukai.com/">博客</a>, 现在他在Thoughworks, 里面有好几篇文章说到为什么要写和怎么写。</p>

<h2>写技术博客的原因</h2>

<ul>
<li><p><strong>写博客可以积累总结自己的一些想法，见证技术学习过程和成长的经历</strong>。所以，我博客里的内容，一般应该会是技术类文章多一点，当然也会有一些开发过程和管理的想法及吐槽。写博客就是一种总结的手段，对自己知识的回顾和梳理。</p></li>
<li><p><strong>博客是一种对外沟通交友，甚至是宣扬思想和文化的平台，说点实际的还可以为自己打广告</strong>。人生在世，总希望找到些志同道合的朋友。这些朋友有生活上的，情感上的，也有事业上的。博客也可以说是为我寻找事业上的朋友的地方之一。</p></li>
<li><p><strong>为后来人积累一些财富，帮助他人解决一些问题</strong>。我已经习惯在Google和别人的博客上索取了那么长时间了，是时候贡献自己的力量的时候了。把自己遇到的一些问题，最终的解决方案，想法分享出来，应该可以帮助一些后来人。也许有人觉得自己遇到的困难和解决方法太微不足道了，说出来让人笑话。其实不然，每个人都有成长过程，像我们也要去获取别人的智慧一样，我们要帮助的就是那些还没有起来的人。而且，也别太小看自己了。</p></li>
</ul>


<h2>用英语的原因</h2>

<p>也许有不少人觉得我在装13，卖弄自己的英语水平。而且我觉得, 用英语写博客, 可能会使得博客流量不高, 正如我那位旧同事所说。那么，我为什么还这么做呢？</p>

<ul>
<li><p>我确实英语水平比中文好，我也喜欢英语多过中文。很多人看到这可能会说我卖国贼，呵呵。其实为什么呢？我从小语文水平都不高，60到70分左右吧，作文也差。对以前的语文课，我完全感受不到语言的美丽。各种什么作者观点分析，文言文等，搞得我对语文很反感，遇到的语文老师，又没几个好的，反正学习语文对我来说充满了挫折感。</p>

<p>  我是在六年级就开始学英语，但那时是用中文来模拟发音和死记的。我记得刚上初中的时候，第一次测验才40多分的。但后来水平一直都不算差，我也不知道为什么。不过使我喜欢上英语的，是因为在大学梦想出国留学，疯狂学英语，考TOEFL和GRE，才喜欢上了，也使得自己水平比附近的人要高。学英语对我来说，充满了成功和优越感。所以，培养成功的感觉，可能真的很重要。为什么同样是语言，学英语我会比学语文好？可能TOEFL和GRE考试都强调的是事实和逻辑推理，不像语文那些什么观点分析那么狗屁吧。</p>

<p>  至于现在，我还那么喜欢英语，我想是延续之前的情结，以及从事IT的缘故吧。所有先进的技术，一开始都从国外发源起来，不懂英语，怎么行呢？</p></li>
<li><p>我现在主要的工作，还是编程。编程用什么语言？废话，当然是英语。大家看过<a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>这本书吗？ 什么叫做<em>Self-Documentary</em>的代码？ 不知道的，看书去。为了能写出清晰，优雅，具有自我说明能力的代码，命名一个变量，一个方法，都是有讲究的，如果一段代码，读起来像读文章一样，那就成功了一大半了。</p>

<p>  而且，在<a href="http://www.amazon.com/More-Joel-Software-Occasionally-Developers/dp/B002KE5SLU/ref=sr_1_1?ie=UTF8&amp;qid=1357050792&amp;sr=8-1&amp;keywords=More+Joel+on+Software">More Joel on Software</a>, 也就是<a href="http://book.douban.com/subject/4163938/">软件随想录</a> 这本书里面，在<em>Learn how to write before graduating</em>这一节里面说到：</p></li>
</ul>


<blockquote><p>the programmers with the most power and influence are the ones who can write and speaks in English clearly, convincingly, and comfortably,</p>

<p>&hellip;</p>

<p>The difference between a tolerable programmer and a great programmer is not how many languages they know, and it&rsquo;s not whether they prefer Python or Java.  It&rsquo;s whether they can communicate their ideas.</p></blockquote>

<p>所以，锻炼用英语来写博客，主要是提高自己的代码编写能力和成为一名好的程序员。</p>

<p>好了, 我已经起航了, 你们是否也考虑考虑写写博客?</p>
]]></content>
  </entry>
  
</feed>
