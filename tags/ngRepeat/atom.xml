<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ngRepeat | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/tags/ngrepeat/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2014-03-30T09:44:43+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expression in AngularJS must be idempotent and for multiple calls]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls/"/>
    <updated>2013-02-02T14:32:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls</id>
    <content type="html"><![CDATA[<p>Recently, I encounter two very interesting issues when using ng-repeat in <a href="http://angularjs.org">AngularJS</a>.  Not completely understanding the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> and <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> is the root cause.</p>

<h2>Requirement</h2>

<p>I am making some workout entries as a list and one special requirement is to group the records by the date.</p>

<p>In order to break the entries to different groups, I use a scope level variable <em>$scope.lastActionDate</em> to keep track of the last actionDate of the entry to decide whether I should add the actionDateGroup DIV.  The source is as below.  The debug messages are used to explain the issues I encountered.  You can safely ignore them now.  Actually, you may already guess what one of the issues is after seeing them.  Yes, only one.  I bet you can never guess the second one and why.</p>

<p>
``` html</p>

<pre><code>&lt;style&gt;
    body {font-family: 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}
    ul li {list-style-type: none;}
    .actionDateGroup {font-weight: bold; color: red}
&lt;/style&gt;
&lt;div id="content" ng-controller="EntryCtrl"&gt;
    &lt;div id="entries"&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="entry in entries"&gt;
                &lt;div ng-switch on="isNewDateGroup(entry.actionDate)"&gt;
                    &lt;div ng-switch-when="true" class="actionDateGroup"&gt;{{entry.actionDate}}&lt;/div&gt;
                &lt;/div&gt;
                &lt;span&gt;{{entry.desc}}&lt;/span&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript" src="./js/angular/angular.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function EntryCtrl($scope, $location) {
        $scope.entries = [{
            desc: 'Rope jumping count 1000',
            actionDate: '2012-01-31',
        },{
            desc: 'Jogging 3000M',
            actionDate: '2012-01-31'
        },{
            desc: 'Situp 40 * 3',
            actionDate: '2012-01-30'
        }];
        $scope.lastActionDate = null;
        $scope.calledCount = 0;

        $scope.isNewDateGroup = function(actionDate) {
            $scope.calledCount++;
            console.log('Function called count: ' + $scope.calledCount);
            console.log('Entry date vs Scope date: ' + actionDate + ' vs ' + $scope.lastActionDate);
            if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
                $scope.lastActionDate = actionDate;
                return true;
            }
            return false;
        };
    }
&lt;/script&gt;
</code></pre>

<p>```
</p>

<h2>Expectation</h2>

<ol>
<li><em>actionDate</em> of the first entry will always be shown as it&rsquo;s the first group.</li>
<li><em>actionDate</em> of the remaining entries will be shown if its value is not the same as the previous one.</li>
</ol>


<h2>Phenomenon</h2>

<p>When the sample data is as above (case #1), the effect looks like it&rsquo;s behaving correctly as below:</p>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-30</div>
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>However, if you change the <em>actionDate</em> of the last entry to be also <strong>2012-01-31</strong> (case #2), you will find the result is that no date group is shown.  Why?  Isn&rsquo;t it supposed to show only the first one as all entries have the same <em>actionDate</em>?</p>

<h4>Expected result:</h4>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<h4>Actual result:</h4>

<ul>
    <li style="list-style-type: none;">
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>Now if you check the calledCount in the debug message, you will find that it&rsquo;s called 6 times (double the entry count) in case #1 and 9 times in case #2.  There are two issues I never thought they should happen:</p>

<ol>
<li>The <em>isNewDateGroup</em> function is called more than the entries' count.  (Guess this, right?)</li>
<li>The called count is different when the data is different.  (how about this?)</li>
</ol>


<h2>Causes</h2>

<p>In AngularJS <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> API:</p>

<blockquote><ul>
<li>Since <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> reruns when it detects changes the watchExpression can execute multiple times per <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> and should be <strong>idempotent</strong>.</li>
<li>The listener is called only when the value from the current watchExpression and the previous call to watchExpression are not equal <strong>(with the exception of the initial run, see below)</strong> &hellip;</li>
<li>The watch listener may change the model, which may trigger other listeners to fire. This is achieved by <strong>rerunning the watchers until no changes are detected</strong>. The rerun iteration limit is 10 to prevent an infinite loop deadlock.
&hellip;
(Since watchExpression can execute multiple times per $digest cycle when a change is detected, be prepared for multiple calls to your listener.)</li>
</ul>
</blockquote>

<h3>Issue #1</h3>

<p>The <em>isNewDateGroup</em> being watched whose calculation relies on value of <em>lastActionDate</em> is not idempotent and so during initial run stage, <em>lastActionDate</em> is set to 2012-01-30 at the end of case #1 which causes the illusion of working, while it is set to 2012-01-31 at the end of case #2 which illustrates the error.</p>

<h3>Issue #2</h3>

<p>In below code, if I comment out <strong>$scope.lastActionDate = actionDate;</strong> or change the <strong>return true;</strong> to <strong>return false;</strong>, the called count will be 6, same as case #1.  This implies that the return value of the expression is the cause.</p>

<p>``` javascript</p>

<pre><code>if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
    $scope.lastActionDate = actionDate;
    return true;
}
</code></pre>

<p>```</p>

<p>Remember what the API states: <strong>rerunning the watchers until no changes are detected</strong>?  Let&rsquo;s see what the return value is for watch expression <em>isNewDateGroup</em> after each run.</p>

<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-30</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true ('2012-01-31' !== '2012-01-30';<br/>
        $scope.lastActionDate = '2012-01-30')
        </td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate !== '2012-01-31')</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true</td>
    </tr>
</table>
</p>


<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-31</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">false (change compared to last run)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">3rd</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
</table>
</p>


<p>So now you see why changing the last entry to 2012-01-31 causes the 3rd time to evaluate the expression again.</p>
]]></content>
  </entry>
  
</feed>
