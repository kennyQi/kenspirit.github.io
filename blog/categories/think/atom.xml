<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Think | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/blog/categories/think/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2014-03-30T09:44:43+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2013 Retrospect and 2014 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2014/01/04/2013-retrospect-and-2014-goal-setting/"/>
    <updated>2014-01-04T08:00:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2014/01/04/2013-retrospect-and-2014-goal-setting</id>
    <content type="html"><![CDATA[<h2>工作</h2>

<p>工作上没有什么太大的变动，可以说趋于平淡。对于项目基本框架的使用已经没有什么问题，所以主要已经是在忙于实现项目业务功能模块上。但是还是痛苦挣扎于一些框架的限制，跨部门的约束，低效率的流程上，感觉效能无法有效提升。</p>

<p>组内的新人，经历了一两年的成长，基本上能够独立做事情。不像以前那样，还没想清楚就乱写代码，有问题又不问，最后又推倒重来。技术水平有些提升，代码也好看了些，所以我的介入相对少了很多。但是还有待提高，特别是那些低级错误，类似变量命名上打错字的问题经常让我发现，这让我非常恼火。因为这足以侧面知道做事认真仔细程度到哪。</p>

<p>去年我主要的侧重是集中精力帮他们提升思考能力和业务理解上，最重要的是怎么去思考业务需求带来系统设计的要求。在组内尽量推动的 Peer Code Review，对成员间的沟通，业务的理解，技术的提高上确实有很大的帮助，今年要再加强。希望今年组内每个成员都达到一定水平后，整体效率可以有效提升。</p>

<p>从团队管理上来说，我并不是做得太好。由于我还要参于很多开发工作，能留给我做些流程或其它方面的改进的时间并不多。计划和进度上也并不是控制的很好，我也始终在看，究竟何时及如何引入 Kanban。看是否能够引入责任人机制，透明化流程，让每个人责任感更强和对计划进度上控制更好。</p>

<h2>自我提升</h2>

<h3>读书</h3>

<p>有些书去年积累到现在都还没有看，主要是技术类的。因为水平有限，技术类的书，用零散时间看的话，真的不容易吸收，特别是没有实践配合的话。所以一直用 Kindle 在零散时间还是看非技术类的多。</p>

<p>不过近期 Kindle 被我基本抛弃在一边了。不是不读书了，而是我已经抱着 MBA 随处边看书，边写代码了。这真是太爽了，虽然对我的颈椎好像有点伤害，不过，这确实可以让我边看书，边实践，榨取更多的时间来 Coding。所以今后将会多看技术类书和实践。</p>

<p><strong>技术类</strong></p>

<ul>
<li>Functional Programming for the Object-Oriented Programmer by Brian Marick</li>
<li><em>NOSQL Distilled by Pramod J. Sadalage, Martin Fowler</em></li>
<li><em>Patterns of Enterprise Application Development by Martin Fowler</em></li>
<li>Domain-Driven Design by Eric Evans</li>
<li><em>The Art of UNIX Programming by Eric S. Raymond</em></li>
</ul>


<p><strong>非技术类</strong></p>

<ul>
<li><em>The Lean Startup by Eric Ries</em></li>
<li>The Pragmatic Programmer by Andrew Hunt, David Thomas</li>
<li><em>Mythical Man-Month by Frederick P. Brooks</em></li>
<li><em>YouTube 创始人陈士俊自传</em></li>
<li><em>打造 Facebook by 王淮</em></li>
<li><em>至关重要的关系 by 李开复</em></li>
<li><em>MackTalk: 人生元编程 by 池建强</em></li>
</ul>


<p><em>注：斜体的已阅</em></p>

<p>今年在看和计划要看完的主要为以下三本最基础的技术书，尽量年内搞定。</p>

<ul>
<li>Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay</li>
<li>Introduction to Algorithms by Thomas H Cormen</li>
<li>Algorithms 4th Edition by Robert Sedgewick and Kevin Wayne</li>
<li>Computer Systems &ndash; A Programmer&rsquo;s Perspective (2nd) by Bryant and O'Hallaron</li>
</ul>


<h3>打造关系网</h3>

<p>在看完《至关重要的关系》后，深有<a href="http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network/">感触</a>, 觉得之前并没有打造一个优质的职业和学习关系网，迫切渴望找到一些志同道合之人，可以一起学习进步。所以去年做了好几样事情：</p>

<ol>
<li>加入珠海 GDG，时不时去当一下志愿者和参加聚会</li>
<li>花血本从珠海飞北京参加了两次会议，一次是 AgileChina2013，一次是京JS。</li>
<li>约几个旧同事和好友，组织起来一起学习和交流</li>
</ol>


<p>几件事情下来，还是有点体会的。</p>

<p>首先，珠海 GDG 的参于还是挺让人兴奋的。参加者因为多为学生，演讲主题都主要是入门级的。真要按照营养上来说的话，对我受益不大。但是有机会认识大妈，刘鑫老师和其他一些组员还是挺高兴的，还让自己增添不少活力。不过以后要参加，就要尽量看能否上去做分享，而不是去听。</p>

<p>至于参加一些行业会议，我的目的本来就很坦然，就是看什么会议是值得去的，什么不值得。所以，目标完全实现。AgileChina2013 那次主要是要去听 David 亲自授课，所以感觉很好。后面的大会，因为讲的是方法论什么的多，这些不亲自实践是没办法了解的，而我近期主要攻技术，所以，敏捷这类大会就不会再去了。京JS 给我的感觉也还可以，虽然会议上难免各种对自己作品的广告，但是还是能和一些大神交流，了解他们的看法，新动向等，还是不错的，明年的 JS 大会应该还会去。经过这些行业会议，体会就是，你如果想和牛人有更多话题，让他们关注和看得起你，自己得先变成牛人。今看还是会留预算去参加一到两个这些会议，看几时能让别人看得起。</p>

<p>最后一个自我组织朋友来一起交流学习的事情，好坏参半。目前情况基本可以说告一段落。虽然大家有聚在一些玩了一些东西，但是感觉每个人的兴趣偏好和对聚会的期望都不尽相同，最后这个聚会基本可以说是失败的。但是中间也学习到不少，和知道自己想要什么。有些事情强求不来，步子迈大了就扯着蛋了。</p>

<h3>开源和项目</h3>

<p>本来是计划做一个 Pet Project，但是做一半后，像上面说的，想约三五朋友一起去做一个更大的东西，一个像 Salesforce 那样的一个 Multi-tenant 的企业系统。可惜没人搭理我，后面自己在考虑怎么在 MongoDB 动态分配空间，和实现了一下后，感觉这东西太大了，先放了下来，后面再找机会继续。</p>

<p>在学习和实践期间，做了两个小玩意出来，一个是用于在 Node.js 和浏览器共享代码的 <a href="https://github.com/kenspirit/webassemble">webassemble</a>, 还有一个是在 ExtJS 里面用 Promise 的 <a href="https://github.com/kenspirit/ExtPromise">ExtPromise</a>。前一个今年如果自己不做什么项目的话，估计使用就会比较少了。希望后一个能什么时候在公司项目里用上。</p>

<p>自己还算是开源的踊跃支持者的，并有幸被 AngularJS 接纳了一个 enhancemnt patch，非常高兴。今年看书以外如果有时间看源码，还会挑一些开源的 JS 项目来参于一下，目前考虑 AngularJS 和 React。</p>

<h2>时间安排</h2>

<p>学习时间：<br/>
基本上是按照去年的时间安排走。上下班车里的30分钟，还有其它一切可能的坐车时间，现在都在用 MBA 看书和写代码。早上5:30左右起来，一直到7点，大概1小时多点而已，周末时间长点。周末午休时间也大概有2小时。基本上就这么多了。</p>

<p>家庭时间：<br/>
和去年差不多，占个人时间大头。但是还是一个不懂怎么培养孩子的父亲，因为时间花在考虑怎么培养自己上面了。只希望给他带个好头，别学坏了就好。每每看到 Michelle 带她女儿体验什么，学习什么，各种惭愧。</p>

<p>锻炼时间：<br/>
中间有段时间断了一下，因为身体受伤，杂七杂八事情，没能很好坚持每天早上固定15分钟左右的锻炼时间。最近恢复，跳绳为主。今年还是得加强一下，身体是本钱。好玩的事情是人生第一次参加公司篮球比赛，虽然偶尔有上场，但主要是抱同组里年轻小伙的大腿，拿到人生的第一个第一名。</p>

<h2>善事</h2>

<p>这方面去年贡献不多，主要是个人精力不足，所以违背了去年美好的想法，每月固定给壹基金和联合国儿间基金会捐助一点。事后证明我行的确实是伪善。</p>

<h2>总结</h2>

<p>工作还凑合，仍需努力和把自己的爱好用在公司项目上。自己喜爱的东西，很难在公司派上用场，感觉真不太爽，看今后怎么操作吧。虽然已经在不断努力学习，也做了一些东西，但是离10000小时原则的强度和积累还是差太远了，今年必须更加努力。正如前面安排，把自己基础巩固好，希望后面能有效提升效能，不断参于开源，写 Blog 和分享总结。还有一件事就是希望可以做个有趣的人，从生活中找找灵感，看能做些什么好玩意没有，反正是随心写代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[京JS 2013 之挖坑自埋与神打击]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/11/14/jingjs-2013-fun/"/>
    <updated>2013-11-14T20:21:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/11/14/jingjs-2013-fun</id>
    <content type="html"><![CDATA[<p><img alt="JingJS Badge" src="http://thinkingincrowd.u.qiniudn.com/JingJS_Badge.jpg?imageView/2/w/100" style="position: relative; float: left; margin-right: 5px; border: 0px;"/>首先要吐槽一下 <a href="http://weibo.com/jingjs2013">@京JS</a>。指示牌不清楚，从酒店另一个门进去根本看不到，最悲剧的是酒店的服务员都不知道这个会议。还有就是硬件上相当不给力，没有 WIFI，这不是新10大酷刑之一吗？没午饭，还要我等外地屌丝奔波找吃的。加之第一天的讲座广告水份有点多，个人感觉有趣的和比较好的是 <a href="https://github.com/substack">@substack</a>，<a href="http://isaacmao.com/">Issac</a> 和讲 Data Visualization 的 Nick。第二天早上的主题还是相当给力的，下午 Kim, Jakob 也还不错。</p>

<p>晚上的活动还是要狠狠表扬一下 @京JS。第一晚包了车库咖啡，晚饭虽然是 Pizza 等，但是量也算足，只是地方有点小，不过也是逼着和别人站着交流的好机会。星期天的晚上还有去 Bar 的 after-party，可惜我要赶飞机回珠海，就没法去了，但估计也会很棒。</p>

<p>第一天晚上，看到 @substack 来了后，我坚定不移地过去和他搭话，接着各种好玩，技术黑和大神间（当然这不包我）的对话就来了。首先声明，可以肯定我的智商是完全没法跟上大神的，加上没法肯定听力上能跟上多少。所以下面的一些神吐糟不保证 100％ 正确，有错误的话也是我这译者的错误，并且这里的技术黑都不是拉仇恨啊。 Please forgive my poor English for any potential misleading.</p>

<p>我和他搭话是因为我最近看的一篇<a href="http://www.thinkingincrowd.me/blog/2013/11/13/callbacks-are-imperative/">关于 Promise 的文章</a>，个人感觉不错的，想问他对比 Callback 有什么看法。原来他并不太喜欢 Promise。（好了，整晚挖坑自埋的节奏开始了）。他指点我去看看 <a href="http://callbackhell.com">callbackhell.com</a>，还有他的 <a href="https://github.com/substack/stream-handbook">stream-handbook</a>。说如果我按照那样做了，也应该不会碰到什么 Hell 的问题。他说即使他以后遇到，也是首先偏向于用 <a href="https://github.com/caolan/async">Async</a> 的。</p>

<p><img alt="Substack Signature" src="http://thinkingincrowd.u.qiniudn.com/Substack_Signature.jpg?imageView/2/w/500" style="border: 0px;"/></p>

<p>接着一个同学拿着 Douglas Crockford 的书给他签名，他说虽然和他有点过节还是观点不同什么来着（他用的词忘了），但还是签了（他的签名很有趣，就是上面这幅机器人漫画，幸亏我也拿到一个）。我就八卦了一下问是他说的是什么情况，他举例说那个什么 <a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html">Hoisting</a> 就是胡扯。我当然也很赞同的说是的，应该定义在离它最近使用的地方。好像记得 <a href="http://weibo.com/lifesinger">@玉伯也叫射雕</a> 也是持同样观点的。</p>

<p>然后 <a href="http://weibo.com/fool2fish">@fool2fish</a> 出现了，问他关于一些测试方面怎么区分浏览器 Tab 独立线程，监测 CPU，等什么的（好像是说这些吧，中间没太跟上）。然后他不断解说和演示他的 <a href="https://github.com/substack/testling">testling</a> 可以拿来怎么用。</p>

<p>之后 @fool2fish 就问可以在 testling 里用什么测试框架，@substack 又把自己的 <a href="https://github.com/substack/tape">tape</a> 搬出来耍了。@fool2fish 再问能否集成 <a href="https://github.com/visionmedia/mocha">Mocha</a> 之类的框架时，@substack 说可以的。但是他不喜欢用那些框架，一堆的全局变量，evil，不是 Node 可以直接运行的程序。还有 <a href="https://github.com/pivotal/jasmine">Jasmine</a> 什么的更烂。估计喜欢这两个的，听到这都晕了。</p>

<p>然后转到问是否支持 <a href="http://en.wikipedia.org/wiki/Asynchronous_module_definition">AMD</a>，<a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a> 的主题上。@fool2fish 就给他瞄了一眼 <a href="https://github.com/seajs/seajs">SeaJS</a> define 的用法，可能本想把它推出国门。没想到他说他知道 SeaJS，但这不是 CommonJS，是 fake 的写法。@fool2fish 脸都绿了，都想拉 @玉伯也叫射雕 来抵抗一下了，没等反应过来。@substack 又搬出了他的 <a href="https://github.com/substack/node-browserify">browserify</a> 来说明怎么把 Node 的代码和浏览器分享（这个观点我一直是比较赞同的，所以之前也基于 <a href="https://github.com/medikoo/modules-webmake">webmake</a> 搞了个 <a href="https://github.com/kenspirit/webassemble">webassemble</a>。因为我觉的生产环境基本都是打包好再用的，哪有什么异步再去拿文件，异步也是拿另一个大 bundle。require 在 Node 的写法，如果在浏览器能通用确实挺好的。回头细想是不是偏后端程序员没看到前端看到的另一些东西，我再想想）。旁边的另一个鬼佬（抱歉不认识是哪位神），看到我们被打击的样子，几乎笑的不行了，都和 @substack 说你别再打击他们了，可是神才不鸟你，继续打击。</p>

<p>后面，他们都走了，我犯贱又去问 @substack 怎么看那些前端的 MVC 或者 MVVM 的框架，比如 <a href="http://angularjs.org">AngularJS</a>。他说他还没看懂到底它最终要解决什么问题，一堆的东西，什么 DI，Databinding 等。我说 Databinding 很好啊，可以免得我们写一堆代码拿值赋值等，declarative 语法也不错啊。他说他只是写纯粹的 JS，那些拿值赋值的可以什么把原生操作抽象和模块化，举例说把复杂的 Form 抽象成模块，只在里头处理赋值拿值之类的。我说那不是 JS 和 HTML 混一起了吗？他好像说只要模块化的好就没有问题了。晕。（这里不敢苟同，可能我还没到那种境界）</p>

<p>最后，又再一次嘴贱的问他那个 tape 能不能集成到 <a href="http://gruntjs.com/%E2%80%8E">Grunt</a>。没想到他说他也没看明白 Grunt 有什么用，我就知道我又挖坑埋自己了。他啪啪啪敲键盘和让我看他怎么用 NPM 的 test 命令，自定义命令和直接结合 Script 来做到一系列的集成操作的。</p>

<p>@substack 真是 geek 到不行啊。他追求纯粹，简洁，和模块化可以说到极致的境地，不喜欢那些大而全的框架，真的是和我最近看的 “Art of Unit Programming” 那本书说到 “Only do one thing and do it really well”，然后通过组合把一些小工具结合成更强大的工具的思想非常吻合。</p>

<p>后面 H神 来了之后，被打击对象转到他头上了。是的，神喷神了，哈哈。以下可能和原话有偏差，因为大神间的对话，我有时实在很难跟上。</p>

<p>H神 在做的是 <a href="http://vertx.io/">Vert.x</a>。他一开始说它们直接支持在 npm 跑还是改了加了什么新功能来着。（一开始我在纠结那个 Vertx 发音是什么东西，迷失了一下）。@substack 就说你们那么改的原因是什么？带来什么好处？没好处改来干什么？（另一个神被打击的样子很有趣 :D ）。后来说 Vert.x 特性是 Polyglot，说到支持 Java，Python 等，@substack 意思好像是说为什么要那么做？那些垃圾语言支持来干嘛？（Python 差点被拖累了，他后来改口说 Python 不烂）我永远都不要写 JAVA。H神 也脸绿了，我也帮口说在商业大项目里，因为系统和团队的多和杂，Polyglot 和 JAVA 都是需要的，虽然我现在也不喜欢 JAVA。其实无论我们怎么说，神的观点都不会变，他就说我不会遇到这样的情况，哈哈。H神 后来问 @substack Vert.x 怎么才能被他们 buyin (接受)，@substack 就不断 blablabla 说什么你们的 api 要保持和 npm 一致，要在 npm 上容易安装，可以通过 -g 参数那样装了后，命令运行等，不然你看现在没人鸟你们，然后各种建议给他。</p>

<p>两大神后来开始缅怀小时候几岁的时候玩什么技术之类的，我的智商和听力就彻底跟不上了。后来 H神 说他用 SQL 去考他妈妈，他妈妈竟然只需要问它那个语句是干什么的，然后她妈妈竟然可以从汇编，指令和寄存器的角度指出它哪里有问题了。靠，开挂了吧。H神 还想请 @substack 去他们上海公司给员工感受一下什么叫做 live for code，而不是 code for live 的精神。说费用他包，问有没有兴趣。@substack 好像说会在中国待 3 星期，没什么问题，之后可能还要到深圳来骑车什么的。深圳的同学们有关系的话，就看能不能请到他去玩了。后面我们扯着扯着就讲到为什么国内那么难找到这样的人，什么独生政策，教育，压力的都来了。中间我还讥讽 H神 也还不是 code for live。他说不是，他是因为写 code 是让他可以赚最多钱的工作。其实他还可以搞建筑什么的，还说他的床上功夫也不错，笑死我。 我们就这样一直聊到 10 点散场了才走了。</p>

<p>整个晚上和 @substack 及其他大神的一些直接对话真比在会场听一天感悟还多。所以意见是大家以后听会议，一定要准备问题，尽量和各种大神聊天。只是听讲座和拍几张PPT或大神照片就没什么用了。</p>

<p><img alt="Group" src="http://thinkingincrowd.u.qiniudn.com/JingJS_AfterParty.JPG?imageView/2/w/500" style="border: 0px;"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[至关重要的关系]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network/"/>
    <updated>2013-06-29T07:59:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network</id>
    <content type="html"><![CDATA[<p>经过<a href="http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta/">前面</a>的自我打造后，现在就要建立<a href="http://www.amazon.cn/dp/B00COJ3CVY">至关重要的关系</a>了。</p>

<h2>比能力重要</h2>

<p>其实我本人对＂关系＂这个词自然而然的会持否定的态度，因为在很多地方，很多人靠不正当关系和手段，谋取职位或升迁。我不喜欢靠＂关系＂，所以才当程序员，才不去国企，和在小公司待那么久。但工作8年以来，我确实靠关系得到不少机会。正如书中所说：</p>

<blockquote><p>斯坦福大学组织行为学教杰弗瑞•菲弗 (Jeffrey Pfeffe) 搜集整理的证据表明人们在升职的时候，人际关系过硬以及与老板的友好关系比能力更重要。这并不是无法无天的任人唯亲和权术 (尽管有时候很不幸确实如此) ，这种做法有令人信服的理由：一个稍许平庸但能很好地处理人际关系并为团队做贡献的人比一个百分之百能力但无法进行团队合作的人对公司更有利。</p></blockquote>

<p>不过这些必须是靠能力建立起来的过硬的关系，要不然就真的是＂不正当关系＂了，并不能持久。</p>

<h2>如何建立</h2>

<h3>被动式</h3>

<p>如果你懒得建立与维护人脉，那就用 <em>@蔡学墉</em> 一段微博总结的方法吧：</p>

<blockquote><p>设法让自己能力强大，把自己变成值得被他人所利用的资源。这么一来，虽然不一定过得太好，但肯定不会过得太差。</p></blockquote>

<h3>付出</h3>

<p>我之前建立的关系，虽然不是完全这样被动式，但也只是在工作中，任劳任怨，努力把自己变优秀，树立好的形象，并主动帮助别人，分享自己的知识。我之前并不觉得有什么特别，但看了这本书后，才知道其实已经用了书中说的最好的方法，就是<strong>真心帮助别人</strong>。日前，一位其实和我并不太熟悉的旧同事，在跳槽的时候，竟然打电话给我，咨询我的意见，这真是让我觉得颇为惊讶。回头一想，自己能被当作值得信赖或听取一点建议的对象，几年的努力，值得了。</p>

<h3>不烦人</h3>

<p>一直以来，我都没有刻意去扩大自己的网络。除了因为上面说的一些偏见和我确实认为我没什么技巧去做这些事情外，其实我是内向型的人，就是别人没有对我表示出善意的情况下，我是基本不会先迈出第一步的，还有我很怕会烦到别人。</p>

<p>但书中其实有说：</p>

<blockquote><p>你一点也不烦人。</p>

<p>如果说巩固某段关系最好的办法是帮助对方，那么位居第二的方法就是接受对方的帮助。正如本•富兰克林曾说过的：＂如果你想交朋友，让别人帮你个小忙。＂</p></blockquote>

<p>所以呢，我决定今后多一点去＂打搅＂一些人。各位要有心里准备哦。</p>

<h2>优质关系网</h2>

<p>人际关系理论中有个很出名的邓巴数 (Dunbar&rsquo;s number)，说的是我们每个人可以维持的关系数目最多不超过150个。而且还有个六度分隔理论，就是平均只要通过六个人，你就可以联系到地球上任何一个人。</p>

<p>虽然说六度分隔理论，理论上可以让你联系到任何人，但其实链条后面一些关系并不能对你的事业起什么大的作用。能极大影响你的事业和获取信息的是人际关系是前三层，就是一直延伸到你的好朋友(第一层)的好朋友(第二层)的好朋友(第三层)。所以，如果邓巴数里说的主要是你的第一层强关系，算上之后两层的话，你的关系网络数目会远大于邓巴数。这三层中彼此之间都有至少一个强关系纽带，相互认识和引荐的可能性非常高，因为彼此有足够了解和信任。当然强关系中很多是重合的，就是你好朋友的好朋友本来就是你的好朋友。而且可能你们的圈子相近，那么他们获取的信息，可能你也知道了的。</p>

<p>所以书中提及另一种关系 &ndash; 弱关系，既是那些和你接触不多的人。它比强关系占优的地方是可能可以给你提供额外消息来源。所以如果要结合两种优点，我们必须尝试寻找一些其他圈子来建立强关系，这就需要我们去参加一些社团之类的活动了。</p>

<p>所以，基于自己在这方面的短板，我也已经尝试去参加一些行业会议，社区和非自己行业但感兴趣的活动群体，比如英语学习的。我也正在尝试围绕自己，寻找志同道合者，建立一个分享机遇和资源的网络。其实要打造一个网络很难，我一直想做，但都没能做好。鹄言乱语社区刚筹备，看能否得到各位好友支持了。</p>

<p>优质网络的基本要求：</p>

<blockquote><p>第一，每个人都很优秀。<br/>
第二，每个群体都有一个共同特征，&hellip; 指引大家走到一起。<br/>
第三，地理密度也很重要。<br/>
第四，分享和合作风气浓厚。</p></blockquote>

<p>从实际情况看，这种优质网络的起源，基本都是在同一公司干过，并同甘共苦之人，比如著名的 PayPal 黑手党。所以，恰当的跳槽，对打造网络也是有好处的。</p>

<h2>机遇</h2>

<p>如果能力上来了，而且关系网能基本建立起来，机会就会逐渐来临了。</p>

<blockquote><p>企业家博•皮博迪 (Bo Peabody) 曾说过：＂让幸运来临的最好做法是确保很多事情发生。＂</p></blockquote>

<p>所以说，<strong>机会给有准备的人</strong>，我觉得其实一方面的意思是你要通过自己不断地努力尝试，去主动制造而来的。</p>

<p>有了机会，其实等于你面前多了一项选择。那你选择什么，是否决定承担某种风险而改变原来的规划，就涉及到风险评估了。</p>

<h2>风险</h2>

<p>我个人应该是偏保守的，做事情都想得比较多，看哪种选择能带来最大好处。而且比较犹豫，不够果断。因为我比较怕有什么风险。但其实我们通常会高估风险 (可能不适用于一些盲目炒股人士，呵呵) 。</p>

<blockquote><p>神经心理学家里奇•汉森 (Rich Hanson) 是这么说的：＂为了让我们的祖先存活，大自然母亲会时不时地玩弄一下他们，让他们犯三个错误：过高估计风险、过低估计机遇、过低估计资源 (资源是用来应对风险、好好利用机遇的) 。＂</p></blockquote>

<p>一般希望稳定的人，都不希望有变动。但这有可能恰恰是更危险的。所以，个人认为所谓稳定的公务员，国企什么的，一些没什么解聘机制的单位，将来风险很高。我们一定要有永久测试心态，适时变动。</p>

<blockquote><p>从短期来看，变动少其实也是一种稳定。从长期来看，变动少很容易导致不堪一击，因为它会减弱系统对突发状况的应对能力。</p></blockquote>

<p>还有就是一般认为，有多几种后备方案，风险就小点。但其实这和<a href="http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta/">前面</a>说到的＂粗糙＂的心是相违背的。正如我们学习编程语言，如果说打算学学这，学学那，然后什么工作都能找到的话，往往是什么工作都找不到。</p>

<blockquote><p>＂保留多重选择＂实际上比专心将一项计划付诸实践更具有风险。</p></blockquote>

<p>回首自己工作来最大的机遇，可能是之前一位旧老板邀请我去上海和他创业。不过当时放不下另一个在香港的机遇，因为当时自我定位不同，对旧公司的忠心，和对家人的考虑，没接受，有点遗憾。因为在珠海确实没什么 IT 氛围和环境，对自我成长有比较大的约束。但其实也没有后悔，因为家人还是最重要的，继续在自己可接受风险范围寻求突破吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[永久测试之心, 寻求真我]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta/"/>
    <updated>2013-06-26T06:39:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/06/26/startup-review-permanent-beta</id>
    <content type="html"><![CDATA[<p>最近看了李开复作序的书：<a href="http://www.amazon.cn/dp/B00COJ3CVY">至关重要的关系</a>，也就是<a href="http://www.amazon.com/dp/B008NXKYNO">THE START-UP OF YOU</a>的译本。书的英文原名和它的意图其实想说明的是，每个人其实都是和企业家一样，具备相同的特质。</p>

<blockquote><p>广义的企业家精神：自主独立，足智多谋，满怀抱负，灵活变通，并拥有广泛的人脉。企业家精神是一种生活态度，而不是一个商业概念；是伴随一生的观念，而不只是某一代人的想法。</p></blockquote>

<p>这本是 <a href="www.linkedin.com">LinkedIn</a> 创始人 Reid Hoffman 和 硅谷企业家 Ben Casnocha 一起写的书。其实书的内容并不只讲述如何建立重要的人际网络关系，还阐明当前变幻无常的职业环境下，怎么样才能保持竞争力。不知道怎么译成中文书名，就变成只突出关系了，可能为了迎合国内对关系的依赖心理吧。</p>

<blockquote><p>你的竞争优势是由三种各不相同且不断变化的力量相互作用而形成的：你的资产、你的追求/价值观和市场现实，即你的综合能力在竞争市场的供应状况。</p></blockquote>

<h2>真我，追求</h2>

<p>书中一段让我非常有感触：</p>

<blockquote><p>你的内心不存在能通过自省发现并为你指明正确方向的＂真我＂。是的，你的追求塑造了你所做的事，但是追求本身就受到你的行动和经历的限制。个性不是你找到的，而是自己浮现的。</p></blockquote>

<p>其实我一直想通过自省来寻找到自我，但发觉真的太难了。身边也缺乏很好的 Mentor，所以一直感觉有点迷茫。我到底应该怎么前行呢？直到看完上面那段话后，终于可以释怀了。回想起前段日子看到 <em>@玉伯也叫射雕</em> 说的＂心要粗糙点＂，<em>@周鸿玮</em> 的这篇<a href="http://m.blog.sina.com.cn/s/blog_49f9228d0101c9pr.html?retcode=0">不喜欢的工作，可能通往一个崭新世界</a>，和自己迷茫前走过的路程，也确实是这么走过来的。</p>

<p>高考时我就是想考计算机专业，没什么理由。毕业时就是想转行从事软件开发，而不是专业的电子方向 (没考上计算机)。还有就是大学时出国留学的想法以至狂学 TOEFL 和 GRE。 至今我也不知道当时为什么这么想，只是有点一根筋的感觉。</p>

<p>之前的工作生涯，领导让做什么我就做什么，说去哪个项目就到哪去，不挑活，只认真干。当时的＂真我＂就是做 BA 或者 Consultant (以前感觉那种职位比码农高级点，现在发现沟通和需求分析根本就是码农必备技能)，而且公司也是主靠这部分业务，所以个人在公司发展可以说一帆风顺。快速学习和解决问题的能力，抗压能力，良好沟通能力也同时在这样情况下培养出来。</p>

<h2>永久测试之心</h2>

<blockquote><p>把职业始终保持在测试阶段，可以强迫自己承认自身还有缺陷，还存在发展空间，还需要适应和进步。不过，这种心态也十分乐观，因为这意味着你有能力改善自己，同时也有能力改变周围的世界。</p></blockquote>

<p>永久测试其实是对非常流行的观点＂我们必须找到自己心中真正的优势和渴望做的事情，然后坚持不懈的努力下去，终将取得非凡成就＂进行必要的一些补充和修订。</p>

<p>虽然如上面所说，自我/价值观需要坚定的去追求，但它也不是一成不变的。因为一开始我们的追求可能是空泛的，含糊的，没有具体步骤和验证过的。我们有时可能只是想当然认为自己想做什么，可以做什么，但不知道能不能做或怎么做。所以必须在实践中验证，也就是不断测试调整的一个过程。</p>

<p>永久测试其实也是应对市场现实而提出的要求。如果你的优势和能力，并没有市场需求的话也是白搭。其实这个观点和 <a href="http://www.amazon.com/dp/0307887898">LEAN STARTUP</a> 里面的 Build-Measure-Learn 这样一个反馈循环正是异曲同工之处。因为我们面对的是迅速变化的市场和趋势，我们必须像打造一个产品一样，不断测试我们身上的技能是否还满足市场的需求。</p>

<p>之前从一家毕业后一直工作了7年的公司离职，除了公司一些长久问题，个人已经不太抱希望管理层能解决外，也是感觉需要去外面的世界看看，测试一下自己能否适应市场的需求。后来面试发现，在珠海这个地方，需要多面手的地方不多，自己看重的广泛技能，英语，沟通和快速学习能力并没多少人欣赏。招聘方看你那么多年经验，基本就是看你在他们想要的技术方面，能深入多少，因为他们多数要的是专才。</p>

<p>但这却是我的短板。我并没哪项技术钻研的很深，脚踏的不够坚实。其实我之前也一直缺乏一定自信，总觉得底气不够。所以，我也就正好调整了一下＂真我＂，决心专攻某一样技术，JS。今后嘛，还是保持一颗<strong>钝</strong>和<strong>粗糙</strong>的心，坚持下去并测试以验证之。</p>

<blockquote><p>在任何情况下，能够检验我们设想的是行动而非计划。只有在实践过程中才能找到自己努力的方向以及方法。</p></blockquote>

<h2>ABZ计划</h2>

<p>这是作者提出来的一种规划手段。</p>

<ul>
<li>A计划：是我们目前从事的事业，一个我们发挥竞争优势的地方。但是在计划执行过程中，我们还是需要时刻根据情况微调，还有试探性寻求B计划。</li>
<li>B计划：在执行A计划途中，如果发现目标或实现途径出现比较大的变化，甚至说客观环境发生重大变动等，就要跳到B计划了。但是B计划从哪冒出来的？其实在不断学习和调整方向中得到。它应该是和A计划不同但相关的方向。最好的方式是在执行A计划同时，从兼职开始做起，试探性去尝试一些想法。这个计划不是仔细计划出来的，而是摸索出来的。</li>
<li>Z计划：这已经是我们的最差打算了。就是万一失业了，什么都没有了，我们可以怎么做？银行剩下的钱可以支撑多少个月没工作？这段时间是否足够学新技能？</li>
</ul>


<p>其实作者强调的就是<strong>不断学习，寻找和调整方向，而且确保有救生方案支撑转变</strong>。</p>

<h2>确立身份</h2>

<blockquote><p>我们应该确立一种身份地位，使其不受老板、地域以及行业的影响。</p></blockquote>

<p>这也是文章里让我觉得很重要的一句。因为当今，及往后的职业发展环境，是＂横向＂忠于职业，而非＂纵向＂忠于老板。当然这并非说朝三暮四，到处跳槽。因为无论在哪就职，为所在企业全力拼搏，也是提高自我竞争力，打造人脉的关键。而作者想强调的是，因为世界变化太快了，每个企业，每个行业都有可能发生巨大变化和转折点，比如数码相机的到来导致柯达的没落；智能手机的出现，使得 Nokia 被抛离。所以这种独立于老板，甚至是行业的自身技能身份定位，为日后应对市场变化非常重要。</p>

<p>所以，对于我们从事 IT 的人来说，写个博客，多参于一些开源项目和活动，做些工作外的作品，是很有必要的。</p>

<p>确保自身技能跟得上变化后，剩下的就是关系问题了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一点点对提问，分享和影响力的看法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/05/28/how-to-ask-share-and-influence/"/>
    <updated>2013-05-28T21:48:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/05/28/how-to-ask-share-and-influence</id>
    <content type="html"><![CDATA[<p>一晚和一位旧同事在 KFC 从10点夜谈到凌晨 3 点。很久没那么年轻过了。我们谈了什么？ 主要是提问，指导和分享，人格魅力和影响力，投资等方面。</p>

<h2>提问，指导和分享</h2>

<p>谈这个问题的起源是因为他刚换工作，觉得某些＂领导＂交代任务的时候，啥都不说清楚，什么相关文档资料都不给。所以他很郁闷地在想，到底是他太笨还是本该交待的没说清楚。后来直到他去问时，对方才像挤牙膏那么挤出来那么一点指引，和给他本该先交出的文档。</p>

<p>到底应该怎么问问题，怎样才算是好的指导和分享呢？</p>

<h3>什么该交代</h3>

<p>对于交代任务，到底什么应该说清楚？ 从我的自身体验来讲，无论对方是否对所要交代的任务有经验，任务<strong>需求</strong>和项目内<strong>约定俗成</strong>的东西，比如代码规范，公司或项目里特殊的工具环境配置，代码库结构等，是必须交代清楚，至少文档齐备。当然还有一个是任务的<strong>时间要求</strong>，因为这是提供给接收任务方做好时间安排和判断应该什么时候寻求帮助的重要条件。如果这些东西缺失了，就是交代任务的人的责任了。</p>

<p>我一般的做法，是先把文档给出去，可是不会先详细说明。这是因为不同的人，对资料吸收能力不同，我会期望任务接收者先花时间看了，心中有了问题，再针对情况进一步决定是否需要更进一步解说。这样既有针对性，还可以用以初步判断一个人的自学和领悟能力。</p>

<h3>什么可以问，怎么问</h3>

<p>对于接收任务的一方来说，如果发现上面提到的应有资料有缺失，我觉得是完全可以而且应该先索取和问清楚，因为你不具备这个责任和条件知道这方面的知识。</p>

<p>拿到资料后，通常在问问题之前，我觉得都必须<strong>认真看过资料 30 分钟到 1 小时的时间</strong>。时间短了，感觉并不能了解清楚；时间长了，如果对文档所说的还是没什么头绪的话，就不应该再闷头苦猜，而是应该求教于交代任务的人，以避免浪费无谓时间。毕竟工作任务都是有时间限制的。</p>

<p>在看资料的时候，我觉得需要了解的，是各个文档的大概内容，相互关系和在任务里各自起的作用。完后，就可以向交代任务的人确定任务开始的方向和提出看文档后产生的具体疑问了。问问题，最好是可以<strong>一次把所有问题有条理的列出来，一次去问。而不是碰到一个问题，问一个</strong>。</p>

<p>正如前面提及，你问的问题，交代任务的人可以用以推断你的能力。需求方面的问题，可以推断出你的逻辑思维能力和对业务的理解。这方面的问题，一开始的时候不懂，是情有可原的，因为毕竟缺乏业务背景。系统设计或技术方面的问题，就可以看出你的经验，技术功底了。对于行业公共技术，应先尽可能 Google 找资料，没办法了，再去问，一方面避免问了些小白问题，另一方面可以提高自己学习能力。对于公司内部特有的技术或框架，我觉得能理解当然最好，时间紧迫的话，求助也无妨。</p>

<h3>怎样才算是好的指导和分享</h3>

<p>当同事或下属向你请教，或者你发现他们有什么地方做的不够好的时候，及时向他们提供指导和经验分享，才是一位称职的专业人士。但是怎样的指导才叫好呢？那晚，那个同事和我提到他之前遇到的几种指导的风格：</p>

<ol>
<li><p>手把手风格<br/>
 这种指导方式，是每个新手最喜欢的。因为领导事无巨细，把要完成任务的每一个步骤，都详细解说一遍。最重要的是，讲到你明白为止，而且还是极有耐心，毫无怨言那种。</p></li>
<li><p>详尽风格<br/>
 这种风格，也会交代出要完成任务的主要步骤，只是没那么详尽，所以也不会向第一种那样毫无怨言的讲到明白为止啦。</p></li>
<li><p><strong>启发性风格</strong><br/>
 这种风格，只会提示重要的点或者步骤，甚至只发个网上的链接让发问者参考，可能就完事了。还是不懂的话，再针对大流程和框架解说一下。反正基本原则是怎么都不轻易把答案直接告诉你。</p></li>
</ol>


<p>你们喜欢哪种？你们觉得我是哪种呢？</p>

<p>那位旧同事说，他现在觉得最后一种，才是最好的。这是因为<strong>授人以鱼不如授人以渔</strong>。如果教会你在某个公司，某个项目里，特定的某些做法，让你可以顺利地完成任务，可能只是一时受益。但是长远来说，如果养成依赖，靠别人指导，而不是自己分析解决问题，其实一点用处都没有。相反，如果能一步步启发思考，尽量让你自己解决问题，以后无论什么环境，都能很好适应。</p>

<p>其实我的风格是第三种 (别说我自夸啊，不信去问那个家伙) 。但是当初他刚毕业，我带他做项目时，他被我折磨地痛苦的要死。他和另一个人老是在琢磨该不该问我问题。看我脸色不太对劲的话，就不敢问了。回想起来，那时候，他不会我们系统的框架，不懂 Javascript，只想写 JAVA。而我不断逼他自己主要看JS代码，教他怎么猜测代码块的上下文，在不懂全部方法的情况下，猜测 Bug 可能在什么地方，怎么忽略代码细节，领略大意等。也是难为他了。</p>

<p>其实我相信我做的是对的，可是为什么他那时那么痛苦呢？</p>

<ol>
<li><p>语气问题
 有时候我的语气感觉比较凶和严，所以他会认为我不够耐心。其实用第三种风格的话，每次提醒的点是不多的，所以一旦语气不好，别人就会认为你没耐心，不想教。我的情况是，对女的态度好点，对聊得来或关系好的朋友说话会没那么多顾虑，对一些感觉学习态度有问题，或者自己不仔细思考的人我会没耐心。他是第二种。</p></li>
<li><p>解释是否通俗易懂<br/>
 他说他现在的一个同事，在向他解释一些他不懂的技术概念的时候，讲的很通俗易懂。而我，当时给他的感觉是解释的不够容易理解。除了上面的语气和耐心也有影响外，一个人要把事情解释到通俗易懂，他必须对要解释的事物有深刻了解，然后能从听众的角度，简化概念，尽量转换成比较容易理解的事物类比。这点我确实是做得不够好的。因为以前我的技术功底确实不深厚 (当然现在也还不行)，要能做到深入浅出确实不行。而且我有时没能从听众角度出发，也是造成难理解的原因。</p></li>
</ol>


<h2>人格魅力与影响力</h2>

<p>那天晚上，我们聊到了电影中国合伙人，俞敏洪，罗永浩，马云等。我那个同事说以前他以为新东方火的原因是上课幽默。其实后来想想应该不是，主要应该是俞敏洪乐于分享，而且难能可贵的是把自己失败的地方和人分享，把自己和听众拉到同一平面上，产生共鸣，另听众感同身受。不像一些只会宣传自己成功经验的人，虽然一时能让听众产生仰慕之情，但感觉高高在上，经验之谈也飘渺不切实际。</p>

<p>我至今碰到的，和尊敬的有非凡人格魅力的人或公司，都是肯无私分享自己实际经验，技能和想法，让别人觉得能从你身上学到东西的人或公司。一旦你身边围绕着一群向你学习的忠实听众，人格魅力和影响力就出来了。像马云，罗永浩还有现在 IT 领域各种大牛等，凭借他们无私的演讲，博客，对开源贡献等积累的忠实听众，为他们的公司，产品营销，创业起了多大的作用。在 <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745">Rework</a> 里面 <strong>Build an Audience</strong> 那节说的很好：</p>

<blockquote><p>the most fortunate companies have <em>audiences</em>.<br/>
&hellip;<br/>
When you build an audience, you don’t have to buy people’s attention—they give it to you. This is a
huge advantage. So build an audience. Speak, write, blog, tweet, make videos, whatever. Share
information that’s valuable and you’ll slowly but surely build a loyal audience. Then, when you need
to get the word out, the right people will already be listening.</p></blockquote>

<p>在此，我也要向之前无私教导我的人，Google 公司，令我获益的各位大牛和博客致敬，努力成为分享的一员。</p>
]]></content>
  </entry>
  
</feed>
